/* soapH.h
   Generated by gSOAP 2.8.17r from search.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_float
#define SOAP_TYPE_float (40)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_float(soap, data),0) || soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedByte
#define SOAP_TYPE_unsignedByte (56)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedByte(soap, data),0) || soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_unsignedInt
#define SOAP_TYPE_unsignedInt (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_unsignedInt(soap, data),0) || soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_result
#define SOAP_TYPE_result (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_result(struct soap*, const char*, int, const result *, const char*);
SOAP_FMAC3 result * SOAP_FMAC4 soap_in_result(struct soap*, const char*, result *, const char*);

#ifndef soap_write_result
#define soap_write_result(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "result", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 result * SOAP_FMAC4 soap_get_result(struct soap*, result *, const char*, const char*);

#ifndef soap_read_result
#define soap_read_result(soap, data) ( soap_begin_recv(soap) || !soap_get_result(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 result * SOAP_FMAC2 soap_instantiate_result(struct soap*, int, const char*, const char*, size_t*);

inline result * soap_new_result(struct soap *soap, int n = -1) { return soap_instantiate_result(soap, n, NULL, NULL, NULL); }

inline result * soap_new_req_result(struct soap *soap, int state, xsd__base64Binary& image) { result *_p = soap_instantiate_result(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->result::state = state; _p->result::image = image; } return _p; }

inline result * soap_new_set_result(struct soap *soap, int state, std::vector<box >& boxes, xsd__base64Binary& image) { result *_p = soap_instantiate_result(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->result::state = state; _p->result::boxes = boxes; _p->result::image = image; } return _p; }

inline void soap_delete_result(struct soap *soap, result *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_result(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_box
#define SOAP_TYPE_box (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_box(struct soap*, const char*, int, const box *, const char*);
SOAP_FMAC3 box * SOAP_FMAC4 soap_in_box(struct soap*, const char*, box *, const char*);

#ifndef soap_write_box
#define soap_write_box(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "box", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 box * SOAP_FMAC4 soap_get_box(struct soap*, box *, const char*, const char*);

#ifndef soap_read_box
#define soap_read_box(soap, data) ( soap_begin_recv(soap) || !soap_get_box(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 box * SOAP_FMAC2 soap_instantiate_box(struct soap*, int, const char*, const char*, size_t*);

inline box * soap_new_box(struct soap *soap, int n = -1) { return soap_instantiate_box(soap, n, NULL, NULL, NULL); }

inline box * soap_new_req_box(struct soap *soap, int x, int width, int y, int height) { box *_p = soap_instantiate_box(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->box::x = x; _p->box::width = width; _p->box::y = y; _p->box::height = height; } return _p; }

inline box * soap_new_set_box(struct soap *soap, int x, int width, int y, int height, std::vector<std::string >& words) { box *_p = soap_instantiate_box(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->box::x = x; _p->box::width = width; _p->box::y = y; _p->box::height = height; _p->box::words = words; } return _p; }

inline void soap_delete_box(struct soap *soap, box *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_box(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (54)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);

#ifndef soap_write_xsd__base64Binary
#define soap_write_xsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary
#define soap_read_xsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(struct soap *soap) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(struct soap *soap, unsigned char *__ptr, int __size) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary::__ptr = __ptr; _p->xsd__base64Binary::__size = __size; } return _p; }

inline void soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns2__textDetect
#define SOAP_TYPE_ns2__textDetect (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__textDetect(struct soap*, struct ns2__textDetect *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__textDetect(struct soap*, const struct ns2__textDetect *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__textDetect(struct soap*, const char*, int, const struct ns2__textDetect *, const char*);
SOAP_FMAC3 struct ns2__textDetect * SOAP_FMAC4 soap_in_ns2__textDetect(struct soap*, const char*, struct ns2__textDetect *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__textDetect(struct soap*, const struct ns2__textDetect *, const char*, const char*);

#ifndef soap_write_ns2__textDetect
#define soap_write_ns2__textDetect(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__textDetect(soap, data),0) || soap_put_ns2__textDetect(soap, data, "ns2:textDetect", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__textDetect * SOAP_FMAC4 soap_get_ns2__textDetect(struct soap*, struct ns2__textDetect *, const char*, const char*);

#ifndef soap_read_ns2__textDetect
#define soap_read_ns2__textDetect(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__textDetect(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns2__textDetect * SOAP_FMAC2 soap_instantiate_ns2__textDetect(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__textDetect * soap_new_ns2__textDetect(struct soap *soap, int n = -1) { return soap_instantiate_ns2__textDetect(soap, n, NULL, NULL, NULL); }

inline struct ns2__textDetect * soap_new_req_ns2__textDetect(struct soap *soap, xsd__base64Binary& input) { struct ns2__textDetect *_p = soap_instantiate_ns2__textDetect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__textDetect(soap, _p); _p->input = input; } return _p; }

inline struct ns2__textDetect * soap_new_set_ns2__textDetect(struct soap *soap, xsd__base64Binary& input) { struct ns2__textDetect *_p = soap_instantiate_ns2__textDetect(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__textDetect(soap, _p); _p->input = input; } return _p; }

inline void soap_delete_ns2__textDetect(struct soap *soap, struct ns2__textDetect *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__textDetect(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__textDetectResponse
#define SOAP_TYPE_ns2__textDetectResponse (67)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__textDetectResponse(struct soap*, struct ns2__textDetectResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__textDetectResponse(struct soap*, const struct ns2__textDetectResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__textDetectResponse(struct soap*, const char*, int, const struct ns2__textDetectResponse *, const char*);
SOAP_FMAC3 struct ns2__textDetectResponse * SOAP_FMAC4 soap_in_ns2__textDetectResponse(struct soap*, const char*, struct ns2__textDetectResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__textDetectResponse(struct soap*, const struct ns2__textDetectResponse *, const char*, const char*);

#ifndef soap_write_ns2__textDetectResponse
#define soap_write_ns2__textDetectResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__textDetectResponse(soap, data),0) || soap_put_ns2__textDetectResponse(soap, data, "ns2:textDetectResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__textDetectResponse * SOAP_FMAC4 soap_get_ns2__textDetectResponse(struct soap*, struct ns2__textDetectResponse *, const char*, const char*);

#ifndef soap_read_ns2__textDetectResponse
#define soap_read_ns2__textDetectResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__textDetectResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns2__textDetectResponse * SOAP_FMAC2 soap_instantiate_ns2__textDetectResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__textDetectResponse * soap_new_ns2__textDetectResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns2__textDetectResponse(soap, n, NULL, NULL, NULL); }

inline struct ns2__textDetectResponse * soap_new_req_ns2__textDetectResponse(struct soap *soap) { struct ns2__textDetectResponse *_p = soap_instantiate_ns2__textDetectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__textDetectResponse(soap, _p); } return _p; }

inline struct ns2__textDetectResponse * soap_new_set_ns2__textDetectResponse(struct soap *soap, result *output) { struct ns2__textDetectResponse *_p = soap_instantiate_ns2__textDetectResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__textDetectResponse(soap, _p); _p->output = output; } return _p; }

inline void soap_delete_ns2__textDetectResponse(struct soap *soap, struct ns2__textDetectResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__textDetectResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__setParams
#define SOAP_TYPE_ns2__setParams (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__setParams(struct soap*, struct ns2__setParams *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__setParams(struct soap*, const struct ns2__setParams *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__setParams(struct soap*, const char*, int, const struct ns2__setParams *, const char*);
SOAP_FMAC3 struct ns2__setParams * SOAP_FMAC4 soap_in_ns2__setParams(struct soap*, const char*, struct ns2__setParams *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__setParams(struct soap*, const struct ns2__setParams *, const char*, const char*);

#ifndef soap_write_ns2__setParams
#define soap_write_ns2__setParams(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__setParams(soap, data),0) || soap_put_ns2__setParams(soap, data, "ns2:setParams", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__setParams * SOAP_FMAC4 soap_get_ns2__setParams(struct soap*, struct ns2__setParams *, const char*, const char*);

#ifndef soap_read_ns2__setParams
#define soap_read_ns2__setParams(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__setParams(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns2__setParams * SOAP_FMAC2 soap_instantiate_ns2__setParams(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__setParams * soap_new_ns2__setParams(struct soap *soap, int n = -1) { return soap_instantiate_ns2__setParams(soap, n, NULL, NULL, NULL); }

inline struct ns2__setParams * soap_new_req_ns2__setParams(struct soap *soap, int input) { struct ns2__setParams *_p = soap_instantiate_ns2__setParams(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__setParams(soap, _p); _p->input = input; } return _p; }

inline struct ns2__setParams * soap_new_set_ns2__setParams(struct soap *soap, int input) { struct ns2__setParams *_p = soap_instantiate_ns2__setParams(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__setParams(soap, _p); _p->input = input; } return _p; }

inline void soap_delete_ns2__setParams(struct soap *soap, struct ns2__setParams *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__setParams(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__setParamsResponse
#define SOAP_TYPE_ns2__setParamsResponse (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__setParamsResponse(struct soap*, struct ns2__setParamsResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__setParamsResponse(struct soap*, const struct ns2__setParamsResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__setParamsResponse(struct soap*, const char*, int, const struct ns2__setParamsResponse *, const char*);
SOAP_FMAC3 struct ns2__setParamsResponse * SOAP_FMAC4 soap_in_ns2__setParamsResponse(struct soap*, const char*, struct ns2__setParamsResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__setParamsResponse(struct soap*, const struct ns2__setParamsResponse *, const char*, const char*);

#ifndef soap_write_ns2__setParamsResponse
#define soap_write_ns2__setParamsResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__setParamsResponse(soap, data),0) || soap_put_ns2__setParamsResponse(soap, data, "ns2:setParamsResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__setParamsResponse * SOAP_FMAC4 soap_get_ns2__setParamsResponse(struct soap*, struct ns2__setParamsResponse *, const char*, const char*);

#ifndef soap_read_ns2__setParamsResponse
#define soap_read_ns2__setParamsResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__setParamsResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns2__setParamsResponse * SOAP_FMAC2 soap_instantiate_ns2__setParamsResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns2__setParamsResponse * soap_new_ns2__setParamsResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns2__setParamsResponse(soap, n, NULL, NULL, NULL); }

inline struct ns2__setParamsResponse * soap_new_req_ns2__setParamsResponse(struct soap *soap) { struct ns2__setParamsResponse *_p = soap_instantiate_ns2__setParamsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__setParamsResponse(soap, _p); } return _p; }

inline struct ns2__setParamsResponse * soap_new_set_ns2__setParamsResponse(struct soap *soap, int *output) { struct ns2__setParamsResponse *_p = soap_instantiate_ns2__setParamsResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns2__setParamsResponse(soap, _p); _p->output = output; } return _p; }

inline void soap_delete_ns2__setParamsResponse(struct soap *soap, struct ns2__setParamsResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__setParamsResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__quit
#define SOAP_TYPE_ns__quit (53)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__quit(struct soap*, struct ns__quit *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__quit(struct soap*, const struct ns__quit *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__quit(struct soap*, const char*, int, const struct ns__quit *, const char*);
SOAP_FMAC3 struct ns__quit * SOAP_FMAC4 soap_in_ns__quit(struct soap*, const char*, struct ns__quit *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__quit(struct soap*, const struct ns__quit *, const char*, const char*);

#ifndef soap_write_ns__quit
#define soap_write_ns__quit(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__quit(soap, data),0) || soap_put_ns__quit(soap, data, "ns:quit", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__quit * SOAP_FMAC4 soap_get_ns__quit(struct soap*, struct ns__quit *, const char*, const char*);

#ifndef soap_read_ns__quit
#define soap_read_ns__quit(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__quit(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__quit * SOAP_FMAC2 soap_instantiate_ns__quit(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__quit * soap_new_ns__quit(struct soap *soap, int n = -1) { return soap_instantiate_ns__quit(soap, n, NULL, NULL, NULL); }

inline struct ns__quit * soap_new_req_ns__quit(struct soap *soap) { struct ns__quit *_p = soap_instantiate_ns__quit(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__quit(soap, _p); } return _p; }

inline struct ns__quit * soap_new_set_ns__quit(struct soap *soap) { struct ns__quit *_p = soap_instantiate_ns__quit(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__quit(soap, _p); } return _p; }

inline void soap_delete_ns__quit(struct soap *soap, struct ns__quit *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__quit(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__quitResponse
#define SOAP_TYPE_ns__quitResponse (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__quitResponse(struct soap*, struct ns__quitResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__quitResponse(struct soap*, const struct ns__quitResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__quitResponse(struct soap*, const char*, int, const struct ns__quitResponse *, const char*);
SOAP_FMAC3 struct ns__quitResponse * SOAP_FMAC4 soap_in_ns__quitResponse(struct soap*, const char*, struct ns__quitResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__quitResponse(struct soap*, const struct ns__quitResponse *, const char*, const char*);

#ifndef soap_write_ns__quitResponse
#define soap_write_ns__quitResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__quitResponse(soap, data),0) || soap_put_ns__quitResponse(soap, data, "ns:quitResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__quitResponse * SOAP_FMAC4 soap_get_ns__quitResponse(struct soap*, struct ns__quitResponse *, const char*, const char*);

#ifndef soap_read_ns__quitResponse
#define soap_read_ns__quitResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__quitResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__quitResponse * SOAP_FMAC2 soap_instantiate_ns__quitResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__quitResponse * soap_new_ns__quitResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__quitResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__quitResponse * soap_new_req_ns__quitResponse(struct soap *soap) { struct ns__quitResponse *_p = soap_instantiate_ns__quitResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__quitResponse(soap, _p); } return _p; }

inline struct ns__quitResponse * soap_new_set_ns__quitResponse(struct soap *soap, int *tag) { struct ns__quitResponse *_p = soap_instantiate_ns__quitResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__quitResponse(soap, _p); _p->tag = tag; } return _p; }

inline void soap_delete_ns__quitResponse(struct soap *soap, struct ns__quitResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__quitResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__pid
#define SOAP_TYPE_ns__pid (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__pid(struct soap*, struct ns__pid *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__pid(struct soap*, const struct ns__pid *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__pid(struct soap*, const char*, int, const struct ns__pid *, const char*);
SOAP_FMAC3 struct ns__pid * SOAP_FMAC4 soap_in_ns__pid(struct soap*, const char*, struct ns__pid *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__pid(struct soap*, const struct ns__pid *, const char*, const char*);

#ifndef soap_write_ns__pid
#define soap_write_ns__pid(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__pid(soap, data),0) || soap_put_ns__pid(soap, data, "ns:pid", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__pid * SOAP_FMAC4 soap_get_ns__pid(struct soap*, struct ns__pid *, const char*, const char*);

#ifndef soap_read_ns__pid
#define soap_read_ns__pid(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__pid(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__pid * SOAP_FMAC2 soap_instantiate_ns__pid(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__pid * soap_new_ns__pid(struct soap *soap, int n = -1) { return soap_instantiate_ns__pid(soap, n, NULL, NULL, NULL); }

inline struct ns__pid * soap_new_req_ns__pid(struct soap *soap) { struct ns__pid *_p = soap_instantiate_ns__pid(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__pid(soap, _p); } return _p; }

inline struct ns__pid * soap_new_set_ns__pid(struct soap *soap) { struct ns__pid *_p = soap_instantiate_ns__pid(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__pid(soap, _p); } return _p; }

inline void soap_delete_ns__pid(struct soap *soap, struct ns__pid *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__pid(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__pidResponse
#define SOAP_TYPE_ns__pidResponse (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__pidResponse(struct soap*, struct ns__pidResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__pidResponse(struct soap*, const struct ns__pidResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__pidResponse(struct soap*, const char*, int, const struct ns__pidResponse *, const char*);
SOAP_FMAC3 struct ns__pidResponse * SOAP_FMAC4 soap_in_ns__pidResponse(struct soap*, const char*, struct ns__pidResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__pidResponse(struct soap*, const struct ns__pidResponse *, const char*, const char*);

#ifndef soap_write_ns__pidResponse
#define soap_write_ns__pidResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__pidResponse(soap, data),0) || soap_put_ns__pidResponse(soap, data, "ns:pidResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__pidResponse * SOAP_FMAC4 soap_get_ns__pidResponse(struct soap*, struct ns__pidResponse *, const char*, const char*);

#ifndef soap_read_ns__pidResponse
#define soap_read_ns__pidResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__pidResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__pidResponse * SOAP_FMAC2 soap_instantiate_ns__pidResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__pidResponse * soap_new_ns__pidResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__pidResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__pidResponse * soap_new_req_ns__pidResponse(struct soap *soap) { struct ns__pidResponse *_p = soap_instantiate_ns__pidResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__pidResponse(soap, _p); } return _p; }

inline struct ns__pidResponse * soap_new_set_ns__pidResponse(struct soap *soap, int *tag) { struct ns__pidResponse *_p = soap_instantiate_ns__pidResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__pidResponse(soap, _p); _p->tag = tag; } return _p; }

inline void soap_delete_ns__pidResponse(struct soap *soap, struct ns__pidResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__pidResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__clear
#define SOAP_TYPE_ns__clear (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__clear(struct soap*, struct ns__clear *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__clear(struct soap*, const struct ns__clear *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__clear(struct soap*, const char*, int, const struct ns__clear *, const char*);
SOAP_FMAC3 struct ns__clear * SOAP_FMAC4 soap_in_ns__clear(struct soap*, const char*, struct ns__clear *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__clear(struct soap*, const struct ns__clear *, const char*, const char*);

#ifndef soap_write_ns__clear
#define soap_write_ns__clear(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__clear(soap, data),0) || soap_put_ns__clear(soap, data, "ns:clear", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__clear * SOAP_FMAC4 soap_get_ns__clear(struct soap*, struct ns__clear *, const char*, const char*);

#ifndef soap_read_ns__clear
#define soap_read_ns__clear(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__clear(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__clear * SOAP_FMAC2 soap_instantiate_ns__clear(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__clear * soap_new_ns__clear(struct soap *soap, int n = -1) { return soap_instantiate_ns__clear(soap, n, NULL, NULL, NULL); }

inline struct ns__clear * soap_new_req_ns__clear(struct soap *soap) { struct ns__clear *_p = soap_instantiate_ns__clear(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__clear(soap, _p); } return _p; }

inline struct ns__clear * soap_new_set_ns__clear(struct soap *soap) { struct ns__clear *_p = soap_instantiate_ns__clear(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__clear(soap, _p); } return _p; }

inline void soap_delete_ns__clear(struct soap *soap, struct ns__clear *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__clear(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__clearResponse
#define SOAP_TYPE_ns__clearResponse (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__clearResponse(struct soap*, struct ns__clearResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__clearResponse(struct soap*, const struct ns__clearResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__clearResponse(struct soap*, const char*, int, const struct ns__clearResponse *, const char*);
SOAP_FMAC3 struct ns__clearResponse * SOAP_FMAC4 soap_in_ns__clearResponse(struct soap*, const char*, struct ns__clearResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__clearResponse(struct soap*, const struct ns__clearResponse *, const char*, const char*);

#ifndef soap_write_ns__clearResponse
#define soap_write_ns__clearResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__clearResponse(soap, data),0) || soap_put_ns__clearResponse(soap, data, "ns:clearResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__clearResponse * SOAP_FMAC4 soap_get_ns__clearResponse(struct soap*, struct ns__clearResponse *, const char*, const char*);

#ifndef soap_read_ns__clearResponse
#define soap_read_ns__clearResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__clearResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__clearResponse * SOAP_FMAC2 soap_instantiate_ns__clearResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__clearResponse * soap_new_ns__clearResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__clearResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__clearResponse * soap_new_req_ns__clearResponse(struct soap *soap) { struct ns__clearResponse *_p = soap_instantiate_ns__clearResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__clearResponse(soap, _p); } return _p; }

inline struct ns__clearResponse * soap_new_set_ns__clearResponse(struct soap *soap, int *tag) { struct ns__clearResponse *_p = soap_instantiate_ns__clearResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__clearResponse(soap, _p); _p->tag = tag; } return _p; }

inline void soap_delete_ns__clearResponse(struct soap *soap, struct ns__clearResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__clearResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__progressPCT
#define SOAP_TYPE_ns__progressPCT (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__progressPCT(struct soap*, struct ns__progressPCT *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__progressPCT(struct soap*, const struct ns__progressPCT *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__progressPCT(struct soap*, const char*, int, const struct ns__progressPCT *, const char*);
SOAP_FMAC3 struct ns__progressPCT * SOAP_FMAC4 soap_in_ns__progressPCT(struct soap*, const char*, struct ns__progressPCT *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__progressPCT(struct soap*, const struct ns__progressPCT *, const char*, const char*);

#ifndef soap_write_ns__progressPCT
#define soap_write_ns__progressPCT(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__progressPCT(soap, data),0) || soap_put_ns__progressPCT(soap, data, "ns:progressPCT", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__progressPCT * SOAP_FMAC4 soap_get_ns__progressPCT(struct soap*, struct ns__progressPCT *, const char*, const char*);

#ifndef soap_read_ns__progressPCT
#define soap_read_ns__progressPCT(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__progressPCT(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__progressPCT * SOAP_FMAC2 soap_instantiate_ns__progressPCT(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__progressPCT * soap_new_ns__progressPCT(struct soap *soap, int n = -1) { return soap_instantiate_ns__progressPCT(soap, n, NULL, NULL, NULL); }

inline struct ns__progressPCT * soap_new_req_ns__progressPCT(struct soap *soap) { struct ns__progressPCT *_p = soap_instantiate_ns__progressPCT(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__progressPCT(soap, _p); } return _p; }

inline struct ns__progressPCT * soap_new_set_ns__progressPCT(struct soap *soap) { struct ns__progressPCT *_p = soap_instantiate_ns__progressPCT(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__progressPCT(soap, _p); } return _p; }

inline void soap_delete_ns__progressPCT(struct soap *soap, struct ns__progressPCT *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__progressPCT(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__progressPCTResponse
#define SOAP_TYPE_ns__progressPCTResponse (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__progressPCTResponse(struct soap*, struct ns__progressPCTResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__progressPCTResponse(struct soap*, const struct ns__progressPCTResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__progressPCTResponse(struct soap*, const char*, int, const struct ns__progressPCTResponse *, const char*);
SOAP_FMAC3 struct ns__progressPCTResponse * SOAP_FMAC4 soap_in_ns__progressPCTResponse(struct soap*, const char*, struct ns__progressPCTResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__progressPCTResponse(struct soap*, const struct ns__progressPCTResponse *, const char*, const char*);

#ifndef soap_write_ns__progressPCTResponse
#define soap_write_ns__progressPCTResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__progressPCTResponse(soap, data),0) || soap_put_ns__progressPCTResponse(soap, data, "ns:progressPCTResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__progressPCTResponse * SOAP_FMAC4 soap_get_ns__progressPCTResponse(struct soap*, struct ns__progressPCTResponse *, const char*, const char*);

#ifndef soap_read_ns__progressPCTResponse
#define soap_read_ns__progressPCTResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__progressPCTResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__progressPCTResponse * SOAP_FMAC2 soap_instantiate_ns__progressPCTResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__progressPCTResponse * soap_new_ns__progressPCTResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__progressPCTResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__progressPCTResponse * soap_new_req_ns__progressPCTResponse(struct soap *soap) { struct ns__progressPCTResponse *_p = soap_instantiate_ns__progressPCTResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__progressPCTResponse(soap, _p); } return _p; }

inline struct ns__progressPCTResponse * soap_new_set_ns__progressPCTResponse(struct soap *soap, float *tag) { struct ns__progressPCTResponse *_p = soap_instantiate_ns__progressPCTResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__progressPCTResponse(soap, _p); _p->tag = tag; } return _p; }

inline void soap_delete_ns__progressPCTResponse(struct soap *soap, struct ns__progressPCTResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__progressPCTResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__state
#define SOAP_TYPE_ns__state (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__state(struct soap*, struct ns__state *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__state(struct soap*, const struct ns__state *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__state(struct soap*, const char*, int, const struct ns__state *, const char*);
SOAP_FMAC3 struct ns__state * SOAP_FMAC4 soap_in_ns__state(struct soap*, const char*, struct ns__state *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__state(struct soap*, const struct ns__state *, const char*, const char*);

#ifndef soap_write_ns__state
#define soap_write_ns__state(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__state(soap, data),0) || soap_put_ns__state(soap, data, "ns:state", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__state * SOAP_FMAC4 soap_get_ns__state(struct soap*, struct ns__state *, const char*, const char*);

#ifndef soap_read_ns__state
#define soap_read_ns__state(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__state(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__state * SOAP_FMAC2 soap_instantiate_ns__state(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__state * soap_new_ns__state(struct soap *soap, int n = -1) { return soap_instantiate_ns__state(soap, n, NULL, NULL, NULL); }

inline struct ns__state * soap_new_req_ns__state(struct soap *soap) { struct ns__state *_p = soap_instantiate_ns__state(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__state(soap, _p); } return _p; }

inline struct ns__state * soap_new_set_ns__state(struct soap *soap) { struct ns__state *_p = soap_instantiate_ns__state(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__state(soap, _p); } return _p; }

inline void soap_delete_ns__state(struct soap *soap, struct ns__state *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__state(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__stateResponse
#define SOAP_TYPE_ns__stateResponse (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__stateResponse(struct soap*, struct ns__stateResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__stateResponse(struct soap*, const struct ns__stateResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__stateResponse(struct soap*, const char*, int, const struct ns__stateResponse *, const char*);
SOAP_FMAC3 struct ns__stateResponse * SOAP_FMAC4 soap_in_ns__stateResponse(struct soap*, const char*, struct ns__stateResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__stateResponse(struct soap*, const struct ns__stateResponse *, const char*, const char*);

#ifndef soap_write_ns__stateResponse
#define soap_write_ns__stateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__stateResponse(soap, data),0) || soap_put_ns__stateResponse(soap, data, "ns:stateResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__stateResponse * SOAP_FMAC4 soap_get_ns__stateResponse(struct soap*, struct ns__stateResponse *, const char*, const char*);

#ifndef soap_read_ns__stateResponse
#define soap_read_ns__stateResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__stateResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__stateResponse * SOAP_FMAC2 soap_instantiate_ns__stateResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__stateResponse * soap_new_ns__stateResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__stateResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__stateResponse * soap_new_req_ns__stateResponse(struct soap *soap) { struct ns__stateResponse *_p = soap_instantiate_ns__stateResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__stateResponse(soap, _p); } return _p; }

inline struct ns__stateResponse * soap_new_set_ns__stateResponse(struct soap *soap, int *tag) { struct ns__stateResponse *_p = soap_instantiate_ns__stateResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__stateResponse(soap, _p); _p->tag = tag; } return _p; }

inline void soap_delete_ns__stateResponse(struct soap *soap, struct ns__stateResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__stateResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__serviceRestart
#define SOAP_TYPE_ns__serviceRestart (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceRestart(struct soap*, struct ns__serviceRestart *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceRestart(struct soap*, const struct ns__serviceRestart *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceRestart(struct soap*, const char*, int, const struct ns__serviceRestart *, const char*);
SOAP_FMAC3 struct ns__serviceRestart * SOAP_FMAC4 soap_in_ns__serviceRestart(struct soap*, const char*, struct ns__serviceRestart *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceRestart(struct soap*, const struct ns__serviceRestart *, const char*, const char*);

#ifndef soap_write_ns__serviceRestart
#define soap_write_ns__serviceRestart(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__serviceRestart(soap, data),0) || soap_put_ns__serviceRestart(soap, data, "ns:serviceRestart", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__serviceRestart * SOAP_FMAC4 soap_get_ns__serviceRestart(struct soap*, struct ns__serviceRestart *, const char*, const char*);

#ifndef soap_read_ns__serviceRestart
#define soap_read_ns__serviceRestart(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__serviceRestart(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__serviceRestart * SOAP_FMAC2 soap_instantiate_ns__serviceRestart(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__serviceRestart * soap_new_ns__serviceRestart(struct soap *soap, int n = -1) { return soap_instantiate_ns__serviceRestart(soap, n, NULL, NULL, NULL); }

inline struct ns__serviceRestart * soap_new_req_ns__serviceRestart(struct soap *soap) { struct ns__serviceRestart *_p = soap_instantiate_ns__serviceRestart(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceRestart(soap, _p); } return _p; }

inline struct ns__serviceRestart * soap_new_set_ns__serviceRestart(struct soap *soap) { struct ns__serviceRestart *_p = soap_instantiate_ns__serviceRestart(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceRestart(soap, _p); } return _p; }

inline void soap_delete_ns__serviceRestart(struct soap *soap, struct ns__serviceRestart *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceRestart(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__serviceRestartResponse
#define SOAP_TYPE_ns__serviceRestartResponse (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceRestartResponse(struct soap*, struct ns__serviceRestartResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceRestartResponse(struct soap*, const struct ns__serviceRestartResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceRestartResponse(struct soap*, const char*, int, const struct ns__serviceRestartResponse *, const char*);
SOAP_FMAC3 struct ns__serviceRestartResponse * SOAP_FMAC4 soap_in_ns__serviceRestartResponse(struct soap*, const char*, struct ns__serviceRestartResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceRestartResponse(struct soap*, const struct ns__serviceRestartResponse *, const char*, const char*);

#ifndef soap_write_ns__serviceRestartResponse
#define soap_write_ns__serviceRestartResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__serviceRestartResponse(soap, data),0) || soap_put_ns__serviceRestartResponse(soap, data, "ns:serviceRestartResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__serviceRestartResponse * SOAP_FMAC4 soap_get_ns__serviceRestartResponse(struct soap*, struct ns__serviceRestartResponse *, const char*, const char*);

#ifndef soap_read_ns__serviceRestartResponse
#define soap_read_ns__serviceRestartResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__serviceRestartResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__serviceRestartResponse * SOAP_FMAC2 soap_instantiate_ns__serviceRestartResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__serviceRestartResponse * soap_new_ns__serviceRestartResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__serviceRestartResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__serviceRestartResponse * soap_new_req_ns__serviceRestartResponse(struct soap *soap) { struct ns__serviceRestartResponse *_p = soap_instantiate_ns__serviceRestartResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceRestartResponse(soap, _p); } return _p; }

inline struct ns__serviceRestartResponse * soap_new_set_ns__serviceRestartResponse(struct soap *soap, int *tag) { struct ns__serviceRestartResponse *_p = soap_instantiate_ns__serviceRestartResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceRestartResponse(soap, _p); _p->tag = tag; } return _p; }

inline void soap_delete_ns__serviceRestartResponse(struct soap *soap, struct ns__serviceRestartResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceRestartResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__serviceStop
#define SOAP_TYPE_ns__serviceStop (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceStop(struct soap*, struct ns__serviceStop *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceStop(struct soap*, const struct ns__serviceStop *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceStop(struct soap*, const char*, int, const struct ns__serviceStop *, const char*);
SOAP_FMAC3 struct ns__serviceStop * SOAP_FMAC4 soap_in_ns__serviceStop(struct soap*, const char*, struct ns__serviceStop *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceStop(struct soap*, const struct ns__serviceStop *, const char*, const char*);

#ifndef soap_write_ns__serviceStop
#define soap_write_ns__serviceStop(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__serviceStop(soap, data),0) || soap_put_ns__serviceStop(soap, data, "ns:serviceStop", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__serviceStop * SOAP_FMAC4 soap_get_ns__serviceStop(struct soap*, struct ns__serviceStop *, const char*, const char*);

#ifndef soap_read_ns__serviceStop
#define soap_read_ns__serviceStop(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__serviceStop(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__serviceStop * SOAP_FMAC2 soap_instantiate_ns__serviceStop(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__serviceStop * soap_new_ns__serviceStop(struct soap *soap, int n = -1) { return soap_instantiate_ns__serviceStop(soap, n, NULL, NULL, NULL); }

inline struct ns__serviceStop * soap_new_req_ns__serviceStop(struct soap *soap) { struct ns__serviceStop *_p = soap_instantiate_ns__serviceStop(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceStop(soap, _p); } return _p; }

inline struct ns__serviceStop * soap_new_set_ns__serviceStop(struct soap *soap) { struct ns__serviceStop *_p = soap_instantiate_ns__serviceStop(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceStop(soap, _p); } return _p; }

inline void soap_delete_ns__serviceStop(struct soap *soap, struct ns__serviceStop *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceStop(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__serviceStopResponse
#define SOAP_TYPE_ns__serviceStopResponse (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceStopResponse(struct soap*, struct ns__serviceStopResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceStopResponse(struct soap*, const struct ns__serviceStopResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceStopResponse(struct soap*, const char*, int, const struct ns__serviceStopResponse *, const char*);
SOAP_FMAC3 struct ns__serviceStopResponse * SOAP_FMAC4 soap_in_ns__serviceStopResponse(struct soap*, const char*, struct ns__serviceStopResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceStopResponse(struct soap*, const struct ns__serviceStopResponse *, const char*, const char*);

#ifndef soap_write_ns__serviceStopResponse
#define soap_write_ns__serviceStopResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__serviceStopResponse(soap, data),0) || soap_put_ns__serviceStopResponse(soap, data, "ns:serviceStopResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__serviceStopResponse * SOAP_FMAC4 soap_get_ns__serviceStopResponse(struct soap*, struct ns__serviceStopResponse *, const char*, const char*);

#ifndef soap_read_ns__serviceStopResponse
#define soap_read_ns__serviceStopResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__serviceStopResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__serviceStopResponse * SOAP_FMAC2 soap_instantiate_ns__serviceStopResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__serviceStopResponse * soap_new_ns__serviceStopResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__serviceStopResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__serviceStopResponse * soap_new_req_ns__serviceStopResponse(struct soap *soap) { struct ns__serviceStopResponse *_p = soap_instantiate_ns__serviceStopResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceStopResponse(soap, _p); } return _p; }

inline struct ns__serviceStopResponse * soap_new_set_ns__serviceStopResponse(struct soap *soap, int *tag) { struct ns__serviceStopResponse *_p = soap_instantiate_ns__serviceStopResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceStopResponse(soap, _p); _p->tag = tag; } return _p; }

inline void soap_delete_ns__serviceStopResponse(struct soap *soap, struct ns__serviceStopResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceStopResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__imSearch
#define SOAP_TYPE_ns__imSearch (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__imSearch(struct soap*, struct ns__imSearch *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__imSearch(struct soap*, const struct ns__imSearch *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__imSearch(struct soap*, const char*, int, const struct ns__imSearch *, const char*);
SOAP_FMAC3 struct ns__imSearch * SOAP_FMAC4 soap_in_ns__imSearch(struct soap*, const char*, struct ns__imSearch *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__imSearch(struct soap*, const struct ns__imSearch *, const char*, const char*);

#ifndef soap_write_ns__imSearch
#define soap_write_ns__imSearch(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__imSearch(soap, data),0) || soap_put_ns__imSearch(soap, data, "ns:imSearch", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__imSearch * SOAP_FMAC4 soap_get_ns__imSearch(struct soap*, struct ns__imSearch *, const char*, const char*);

#ifndef soap_read_ns__imSearch
#define soap_read_ns__imSearch(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__imSearch(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__imSearch * SOAP_FMAC2 soap_instantiate_ns__imSearch(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__imSearch * soap_new_ns__imSearch(struct soap *soap, int n = -1) { return soap_instantiate_ns__imSearch(soap, n, NULL, NULL, NULL); }

inline struct ns__imSearch * soap_new_req_ns__imSearch(struct soap *soap, std::string& imgPath) { struct ns__imSearch *_p = soap_instantiate_ns__imSearch(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__imSearch(soap, _p); _p->imgPath = imgPath; } return _p; }

inline struct ns__imSearch * soap_new_set_ns__imSearch(struct soap *soap, std::string& imgPath) { struct ns__imSearch *_p = soap_instantiate_ns__imSearch(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__imSearch(soap, _p); _p->imgPath = imgPath; } return _p; }

inline void soap_delete_ns__imSearch(struct soap *soap, struct ns__imSearch *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__imSearch(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__serviceStart
#define SOAP_TYPE_ns__serviceStart (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceStart(struct soap*, struct ns__serviceStart *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceStart(struct soap*, const struct ns__serviceStart *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceStart(struct soap*, const char*, int, const struct ns__serviceStart *, const char*);
SOAP_FMAC3 struct ns__serviceStart * SOAP_FMAC4 soap_in_ns__serviceStart(struct soap*, const char*, struct ns__serviceStart *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceStart(struct soap*, const struct ns__serviceStart *, const char*, const char*);

#ifndef soap_write_ns__serviceStart
#define soap_write_ns__serviceStart(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__serviceStart(soap, data),0) || soap_put_ns__serviceStart(soap, data, "ns:serviceStart", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__serviceStart * SOAP_FMAC4 soap_get_ns__serviceStart(struct soap*, struct ns__serviceStart *, const char*, const char*);

#ifndef soap_read_ns__serviceStart
#define soap_read_ns__serviceStart(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__serviceStart(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__serviceStart * SOAP_FMAC2 soap_instantiate_ns__serviceStart(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__serviceStart * soap_new_ns__serviceStart(struct soap *soap, int n = -1) { return soap_instantiate_ns__serviceStart(soap, n, NULL, NULL, NULL); }

inline struct ns__serviceStart * soap_new_req_ns__serviceStart(struct soap *soap) { struct ns__serviceStart *_p = soap_instantiate_ns__serviceStart(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceStart(soap, _p); } return _p; }

inline struct ns__serviceStart * soap_new_set_ns__serviceStart(struct soap *soap) { struct ns__serviceStart *_p = soap_instantiate_ns__serviceStart(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceStart(soap, _p); } return _p; }

inline void soap_delete_ns__serviceStart(struct soap *soap, struct ns__serviceStart *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceStart(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__serviceStartResponse
#define SOAP_TYPE_ns__serviceStartResponse (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceStartResponse(struct soap*, struct ns__serviceStartResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceStartResponse(struct soap*, const struct ns__serviceStartResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceStartResponse(struct soap*, const char*, int, const struct ns__serviceStartResponse *, const char*);
SOAP_FMAC3 struct ns__serviceStartResponse * SOAP_FMAC4 soap_in_ns__serviceStartResponse(struct soap*, const char*, struct ns__serviceStartResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceStartResponse(struct soap*, const struct ns__serviceStartResponse *, const char*, const char*);

#ifndef soap_write_ns__serviceStartResponse
#define soap_write_ns__serviceStartResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__serviceStartResponse(soap, data),0) || soap_put_ns__serviceStartResponse(soap, data, "ns:serviceStartResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__serviceStartResponse * SOAP_FMAC4 soap_get_ns__serviceStartResponse(struct soap*, struct ns__serviceStartResponse *, const char*, const char*);

#ifndef soap_read_ns__serviceStartResponse
#define soap_read_ns__serviceStartResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__serviceStartResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__serviceStartResponse * SOAP_FMAC2 soap_instantiate_ns__serviceStartResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__serviceStartResponse * soap_new_ns__serviceStartResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__serviceStartResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__serviceStartResponse * soap_new_req_ns__serviceStartResponse(struct soap *soap) { struct ns__serviceStartResponse *_p = soap_instantiate_ns__serviceStartResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceStartResponse(soap, _p); } return _p; }

inline struct ns__serviceStartResponse * soap_new_set_ns__serviceStartResponse(struct soap *soap, int *tag) { struct ns__serviceStartResponse *_p = soap_instantiate_ns__serviceStartResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceStartResponse(soap, _p); _p->tag = tag; } return _p; }

inline void soap_delete_ns__serviceStartResponse(struct soap *soap, struct ns__serviceStartResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceStartResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__trainDelete
#define SOAP_TYPE_ns__trainDelete (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__trainDelete(struct soap*, struct ns__trainDelete *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__trainDelete(struct soap*, const struct ns__trainDelete *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__trainDelete(struct soap*, const char*, int, const struct ns__trainDelete *, const char*);
SOAP_FMAC3 struct ns__trainDelete * SOAP_FMAC4 soap_in_ns__trainDelete(struct soap*, const char*, struct ns__trainDelete *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__trainDelete(struct soap*, const struct ns__trainDelete *, const char*, const char*);

#ifndef soap_write_ns__trainDelete
#define soap_write_ns__trainDelete(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__trainDelete(soap, data),0) || soap_put_ns__trainDelete(soap, data, "ns:trainDelete", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__trainDelete * SOAP_FMAC4 soap_get_ns__trainDelete(struct soap*, struct ns__trainDelete *, const char*, const char*);

#ifndef soap_read_ns__trainDelete
#define soap_read_ns__trainDelete(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__trainDelete(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__trainDelete * SOAP_FMAC2 soap_instantiate_ns__trainDelete(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__trainDelete * soap_new_ns__trainDelete(struct soap *soap, int n = -1) { return soap_instantiate_ns__trainDelete(soap, n, NULL, NULL, NULL); }

inline struct ns__trainDelete * soap_new_req_ns__trainDelete(struct soap *soap, std::string& imgPath) { struct ns__trainDelete *_p = soap_instantiate_ns__trainDelete(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainDelete(soap, _p); _p->imgPath = imgPath; } return _p; }

inline struct ns__trainDelete * soap_new_set_ns__trainDelete(struct soap *soap, std::string& imgPath) { struct ns__trainDelete *_p = soap_instantiate_ns__trainDelete(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainDelete(soap, _p); _p->imgPath = imgPath; } return _p; }

inline void soap_delete_ns__trainDelete(struct soap *soap, struct ns__trainDelete *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__trainDelete(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__trainDeleteResponse
#define SOAP_TYPE_ns__trainDeleteResponse (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__trainDeleteResponse(struct soap*, struct ns__trainDeleteResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__trainDeleteResponse(struct soap*, const struct ns__trainDeleteResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__trainDeleteResponse(struct soap*, const char*, int, const struct ns__trainDeleteResponse *, const char*);
SOAP_FMAC3 struct ns__trainDeleteResponse * SOAP_FMAC4 soap_in_ns__trainDeleteResponse(struct soap*, const char*, struct ns__trainDeleteResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__trainDeleteResponse(struct soap*, const struct ns__trainDeleteResponse *, const char*, const char*);

#ifndef soap_write_ns__trainDeleteResponse
#define soap_write_ns__trainDeleteResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__trainDeleteResponse(soap, data),0) || soap_put_ns__trainDeleteResponse(soap, data, "ns:trainDeleteResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__trainDeleteResponse * SOAP_FMAC4 soap_get_ns__trainDeleteResponse(struct soap*, struct ns__trainDeleteResponse *, const char*, const char*);

#ifndef soap_read_ns__trainDeleteResponse
#define soap_read_ns__trainDeleteResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__trainDeleteResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__trainDeleteResponse * SOAP_FMAC2 soap_instantiate_ns__trainDeleteResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__trainDeleteResponse * soap_new_ns__trainDeleteResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__trainDeleteResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__trainDeleteResponse * soap_new_req_ns__trainDeleteResponse(struct soap *soap) { struct ns__trainDeleteResponse *_p = soap_instantiate_ns__trainDeleteResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainDeleteResponse(soap, _p); } return _p; }

inline struct ns__trainDeleteResponse * soap_new_set_ns__trainDeleteResponse(struct soap *soap, int *tag) { struct ns__trainDeleteResponse *_p = soap_instantiate_ns__trainDeleteResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainDeleteResponse(soap, _p); _p->tag = tag; } return _p; }

inline void soap_delete_ns__trainDeleteResponse(struct soap *soap, struct ns__trainDeleteResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__trainDeleteResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__trainAdd
#define SOAP_TYPE_ns__trainAdd (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__trainAdd(struct soap*, struct ns__trainAdd *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__trainAdd(struct soap*, const struct ns__trainAdd *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__trainAdd(struct soap*, const char*, int, const struct ns__trainAdd *, const char*);
SOAP_FMAC3 struct ns__trainAdd * SOAP_FMAC4 soap_in_ns__trainAdd(struct soap*, const char*, struct ns__trainAdd *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__trainAdd(struct soap*, const struct ns__trainAdd *, const char*, const char*);

#ifndef soap_write_ns__trainAdd
#define soap_write_ns__trainAdd(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__trainAdd(soap, data),0) || soap_put_ns__trainAdd(soap, data, "ns:trainAdd", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__trainAdd * SOAP_FMAC4 soap_get_ns__trainAdd(struct soap*, struct ns__trainAdd *, const char*, const char*);

#ifndef soap_read_ns__trainAdd
#define soap_read_ns__trainAdd(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__trainAdd(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__trainAdd * SOAP_FMAC2 soap_instantiate_ns__trainAdd(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__trainAdd * soap_new_ns__trainAdd(struct soap *soap, int n = -1) { return soap_instantiate_ns__trainAdd(soap, n, NULL, NULL, NULL); }

inline struct ns__trainAdd * soap_new_req_ns__trainAdd(struct soap *soap, std::string& imgPath) { struct ns__trainAdd *_p = soap_instantiate_ns__trainAdd(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainAdd(soap, _p); _p->imgPath = imgPath; } return _p; }

inline struct ns__trainAdd * soap_new_set_ns__trainAdd(struct soap *soap, std::string& imgPath) { struct ns__trainAdd *_p = soap_instantiate_ns__trainAdd(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainAdd(soap, _p); _p->imgPath = imgPath; } return _p; }

inline void soap_delete_ns__trainAdd(struct soap *soap, struct ns__trainAdd *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__trainAdd(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__trainAddResponse
#define SOAP_TYPE_ns__trainAddResponse (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__trainAddResponse(struct soap*, struct ns__trainAddResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__trainAddResponse(struct soap*, const struct ns__trainAddResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__trainAddResponse(struct soap*, const char*, int, const struct ns__trainAddResponse *, const char*);
SOAP_FMAC3 struct ns__trainAddResponse * SOAP_FMAC4 soap_in_ns__trainAddResponse(struct soap*, const char*, struct ns__trainAddResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__trainAddResponse(struct soap*, const struct ns__trainAddResponse *, const char*, const char*);

#ifndef soap_write_ns__trainAddResponse
#define soap_write_ns__trainAddResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__trainAddResponse(soap, data),0) || soap_put_ns__trainAddResponse(soap, data, "ns:trainAddResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__trainAddResponse * SOAP_FMAC4 soap_get_ns__trainAddResponse(struct soap*, struct ns__trainAddResponse *, const char*, const char*);

#ifndef soap_read_ns__trainAddResponse
#define soap_read_ns__trainAddResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__trainAddResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__trainAddResponse * SOAP_FMAC2 soap_instantiate_ns__trainAddResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__trainAddResponse * soap_new_ns__trainAddResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__trainAddResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__trainAddResponse * soap_new_req_ns__trainAddResponse(struct soap *soap) { struct ns__trainAddResponse *_p = soap_instantiate_ns__trainAddResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainAddResponse(soap, _p); } return _p; }

inline struct ns__trainAddResponse * soap_new_set_ns__trainAddResponse(struct soap *soap, int *tag) { struct ns__trainAddResponse *_p = soap_instantiate_ns__trainAddResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainAddResponse(soap, _p); _p->tag = tag; } return _p; }

inline void soap_delete_ns__trainAddResponse(struct soap *soap, struct ns__trainAddResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__trainAddResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__train
#define SOAP_TYPE_ns__train (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__train(struct soap*, struct ns__train *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__train(struct soap*, const struct ns__train *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__train(struct soap*, const char*, int, const struct ns__train *, const char*);
SOAP_FMAC3 struct ns__train * SOAP_FMAC4 soap_in_ns__train(struct soap*, const char*, struct ns__train *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__train(struct soap*, const struct ns__train *, const char*, const char*);

#ifndef soap_write_ns__train
#define soap_write_ns__train(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__train(soap, data),0) || soap_put_ns__train(soap, data, "ns:train", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__train * SOAP_FMAC4 soap_get_ns__train(struct soap*, struct ns__train *, const char*, const char*);

#ifndef soap_read_ns__train
#define soap_read_ns__train(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__train(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__train * SOAP_FMAC2 soap_instantiate_ns__train(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__train * soap_new_ns__train(struct soap *soap, int n = -1) { return soap_instantiate_ns__train(soap, n, NULL, NULL, NULL); }

inline struct ns__train * soap_new_req_ns__train(struct soap *soap, int autostart) { struct ns__train *_p = soap_instantiate_ns__train(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__train(soap, _p); _p->autostart = autostart; } return _p; }

inline struct ns__train * soap_new_set_ns__train(struct soap *soap, int autostart) { struct ns__train *_p = soap_instantiate_ns__train(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__train(soap, _p); _p->autostart = autostart; } return _p; }

inline void soap_delete_ns__train(struct soap *soap, struct ns__train *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__train(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__trainResponse
#define SOAP_TYPE_ns__trainResponse (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__trainResponse(struct soap*, struct ns__trainResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__trainResponse(struct soap*, const struct ns__trainResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__trainResponse(struct soap*, const char*, int, const struct ns__trainResponse *, const char*);
SOAP_FMAC3 struct ns__trainResponse * SOAP_FMAC4 soap_in_ns__trainResponse(struct soap*, const char*, struct ns__trainResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__trainResponse(struct soap*, const struct ns__trainResponse *, const char*, const char*);

#ifndef soap_write_ns__trainResponse
#define soap_write_ns__trainResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__trainResponse(soap, data),0) || soap_put_ns__trainResponse(soap, data, "ns:trainResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__trainResponse * SOAP_FMAC4 soap_get_ns__trainResponse(struct soap*, struct ns__trainResponse *, const char*, const char*);

#ifndef soap_read_ns__trainResponse
#define soap_read_ns__trainResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__trainResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__trainResponse * SOAP_FMAC2 soap_instantiate_ns__trainResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__trainResponse * soap_new_ns__trainResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__trainResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__trainResponse * soap_new_req_ns__trainResponse(struct soap *soap) { struct ns__trainResponse *_p = soap_instantiate_ns__trainResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainResponse(soap, _p); } return _p; }

inline struct ns__trainResponse * soap_new_set_ns__trainResponse(struct soap *soap, int *tag) { struct ns__trainResponse *_p = soap_instantiate_ns__trainResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__trainResponse(soap, _p); _p->tag = tag; } return _p; }

inline void soap_delete_ns__trainResponse(struct soap *soap, struct ns__trainResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__trainResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__serviceInit
#define SOAP_TYPE_ns__serviceInit (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceInit(struct soap*, struct ns__serviceInit *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceInit(struct soap*, const struct ns__serviceInit *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceInit(struct soap*, const char*, int, const struct ns__serviceInit *, const char*);
SOAP_FMAC3 struct ns__serviceInit * SOAP_FMAC4 soap_in_ns__serviceInit(struct soap*, const char*, struct ns__serviceInit *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceInit(struct soap*, const struct ns__serviceInit *, const char*, const char*);

#ifndef soap_write_ns__serviceInit
#define soap_write_ns__serviceInit(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__serviceInit(soap, data),0) || soap_put_ns__serviceInit(soap, data, "ns:serviceInit", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__serviceInit * SOAP_FMAC4 soap_get_ns__serviceInit(struct soap*, struct ns__serviceInit *, const char*, const char*);

#ifndef soap_read_ns__serviceInit
#define soap_read_ns__serviceInit(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__serviceInit(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__serviceInit * SOAP_FMAC2 soap_instantiate_ns__serviceInit(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__serviceInit * soap_new_ns__serviceInit(struct soap *soap, int n = -1) { return soap_instantiate_ns__serviceInit(soap, n, NULL, NULL, NULL); }

inline struct ns__serviceInit * soap_new_req_ns__serviceInit(struct soap *soap, std::string& workspace, std::string& tpldir, std::string& recgmethod, std::string& option) { struct ns__serviceInit *_p = soap_instantiate_ns__serviceInit(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceInit(soap, _p); _p->workspace = workspace; _p->tpldir = tpldir; _p->recgmethod = recgmethod; _p->option = option; } return _p; }

inline struct ns__serviceInit * soap_new_set_ns__serviceInit(struct soap *soap, std::string& workspace, std::string& tpldir, std::string& recgmethod, std::string& option) { struct ns__serviceInit *_p = soap_instantiate_ns__serviceInit(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceInit(soap, _p); _p->workspace = workspace; _p->tpldir = tpldir; _p->recgmethod = recgmethod; _p->option = option; } return _p; }

inline void soap_delete_ns__serviceInit(struct soap *soap, struct ns__serviceInit *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceInit(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__serviceInitResponse
#define SOAP_TYPE_ns__serviceInitResponse (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceInitResponse(struct soap*, struct ns__serviceInitResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceInitResponse(struct soap*, const struct ns__serviceInitResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceInitResponse(struct soap*, const char*, int, const struct ns__serviceInitResponse *, const char*);
SOAP_FMAC3 struct ns__serviceInitResponse * SOAP_FMAC4 soap_in_ns__serviceInitResponse(struct soap*, const char*, struct ns__serviceInitResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceInitResponse(struct soap*, const struct ns__serviceInitResponse *, const char*, const char*);

#ifndef soap_write_ns__serviceInitResponse
#define soap_write_ns__serviceInitResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__serviceInitResponse(soap, data),0) || soap_put_ns__serviceInitResponse(soap, data, "ns:serviceInitResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__serviceInitResponse * SOAP_FMAC4 soap_get_ns__serviceInitResponse(struct soap*, struct ns__serviceInitResponse *, const char*, const char*);

#ifndef soap_read_ns__serviceInitResponse
#define soap_read_ns__serviceInitResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__serviceInitResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__serviceInitResponse * SOAP_FMAC2 soap_instantiate_ns__serviceInitResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__serviceInitResponse * soap_new_ns__serviceInitResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__serviceInitResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__serviceInitResponse * soap_new_req_ns__serviceInitResponse(struct soap *soap) { struct ns__serviceInitResponse *_p = soap_instantiate_ns__serviceInitResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceInitResponse(soap, _p); } return _p; }

inline struct ns__serviceInitResponse * soap_new_set_ns__serviceInitResponse(struct soap *soap, int *tag) { struct ns__serviceInitResponse *_p = soap_instantiate_ns__serviceInitResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__serviceInitResponse(soap, _p); _p->tag = tag; } return _p; }

inline void soap_delete_ns__serviceInitResponse(struct soap *soap, struct ns__serviceInitResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceInitResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__searchResponse
#define SOAP_TYPE_ns__searchResponse (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__searchResponse(struct soap*, struct ns__searchResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__searchResponse(struct soap*, const struct ns__searchResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__searchResponse(struct soap*, const char*, int, const struct ns__searchResponse *, const char*);
SOAP_FMAC3 struct ns__searchResponse * SOAP_FMAC4 soap_in_ns__searchResponse(struct soap*, const char*, struct ns__searchResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__searchResponse(struct soap*, const struct ns__searchResponse *, const char*, const char*);

#ifndef soap_write_ns__searchResponse
#define soap_write_ns__searchResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__searchResponse(soap, data),0) || soap_put_ns__searchResponse(soap, data, "ns:searchResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__searchResponse * SOAP_FMAC4 soap_get_ns__searchResponse(struct soap*, struct ns__searchResponse *, const char*, const char*);

#ifndef soap_read_ns__searchResponse
#define soap_read_ns__searchResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__searchResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__searchResponse * SOAP_FMAC2 soap_instantiate_ns__searchResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__searchResponse * soap_new_ns__searchResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__searchResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__searchResponse * soap_new_req_ns__searchResponse(struct soap *soap, int tag, std::string& ocr, int consumedTime) { struct ns__searchResponse *_p = soap_instantiate_ns__searchResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__searchResponse(soap, _p); _p->tag = tag; _p->ocr = ocr; _p->consumedTime = consumedTime; } return _p; }

inline struct ns__searchResponse * soap_new_set_ns__searchResponse(struct soap *soap, int tag, std::vector<struct ns__pc >& match, std::string& ocr, int consumedTime) { struct ns__searchResponse *_p = soap_instantiate_ns__searchResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__searchResponse(soap, _p); _p->tag = tag; _p->match = match; _p->ocr = ocr; _p->consumedTime = consumedTime; } return _p; }

inline void soap_delete_ns__searchResponse(struct soap *soap, struct ns__searchResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__searchResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns__pc
#define SOAP_TYPE_ns__pc (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__pc(struct soap*, struct ns__pc *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__pc(struct soap*, const struct ns__pc *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__pc(struct soap*, const char*, int, const struct ns__pc *, const char*);
SOAP_FMAC3 struct ns__pc * SOAP_FMAC4 soap_in_ns__pc(struct soap*, const char*, struct ns__pc *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__pc(struct soap*, const struct ns__pc *, const char*, const char*);

#ifndef soap_write_ns__pc
#define soap_write_ns__pc(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns__pc(soap, data),0) || soap_put_ns__pc(soap, data, "ns:pc", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__pc * SOAP_FMAC4 soap_get_ns__pc(struct soap*, struct ns__pc *, const char*, const char*);

#ifndef soap_read_ns__pc
#define soap_read_ns__pc(soap, data) ( soap_begin_recv(soap) || !soap_get_ns__pc(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__pc * SOAP_FMAC2 soap_instantiate_ns__pc(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__pc * soap_new_ns__pc(struct soap *soap, int n = -1) { return soap_instantiate_ns__pc(soap, n, NULL, NULL, NULL); }

inline struct ns__pc * soap_new_req_ns__pc(struct soap *soap, std::string& pc, int score) { struct ns__pc *_p = soap_instantiate_ns__pc(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__pc(soap, _p); _p->pc = pc; _p->score = score; } return _p; }

inline struct ns__pc * soap_new_set_ns__pc(struct soap *soap, std::string& pc, int score) { struct ns__pc *_p = soap_instantiate_ns__pc(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__pc(soap, _p); _p->pc = pc; _p->score = score; } return _p; }

inline void soap_delete_ns__pc(struct soap *soap, struct ns__pc *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__pc(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (78)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerToresult
#define SOAP_TYPE_PointerToresult (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToresult(struct soap*, result *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToresult(struct soap*, const char *, int, result *const*, const char *);
SOAP_FMAC3 result ** SOAP_FMAC4 soap_in_PointerToresult(struct soap*, const char*, result **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToresult(struct soap*, result *const*, const char*, const char*);

#ifndef soap_write_PointerToresult
#define soap_write_PointerToresult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToresult(soap, data),0) || soap_put_PointerToresult(soap, data, "result", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 result ** SOAP_FMAC4 soap_get_PointerToresult(struct soap*, result **, const char*, const char*);

#ifndef soap_read_PointerToresult
#define soap_read_PointerToresult(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToresult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTounsignedByte
#define SOAP_TYPE_PointerTounsignedByte (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTounsignedByte(soap, data),0) || soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTofloat
#define SOAP_TYPE_PointerTofloat (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap*, float *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap*, const char *, int, float *const*, const char *);
SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap*, const char*, float **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap*, float *const*, const char*, const char*);

#ifndef soap_write_PointerTofloat
#define soap_write_PointerTofloat(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTofloat(soap, data),0) || soap_put_PointerTofloat(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap*, float **, const char*, const char*);

#ifndef soap_read_PointerTofloat
#define soap_read_PointerTofloat(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTofloat(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTons__searchResponse
#define SOAP_TYPE_PointerTons__searchResponse (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__searchResponse(struct soap*, struct ns__searchResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__searchResponse(struct soap*, const char *, int, struct ns__searchResponse *const*, const char *);
SOAP_FMAC3 struct ns__searchResponse ** SOAP_FMAC4 soap_in_PointerTons__searchResponse(struct soap*, const char*, struct ns__searchResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__searchResponse(struct soap*, struct ns__searchResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTons__searchResponse
#define soap_write_PointerTons__searchResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTons__searchResponse(soap, data),0) || soap_put_PointerTons__searchResponse(soap, data, "ns:searchResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__searchResponse ** SOAP_FMAC4 soap_get_PointerTons__searchResponse(struct soap*, struct ns__searchResponse **, const char*, const char*);

#ifndef soap_read_PointerTons__searchResponse
#define soap_read_PointerTons__searchResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons__searchResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data),0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfbox
#define SOAP_TYPE_std__vectorTemplateOfbox (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfbox(struct soap*, std::vector<box >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfbox(struct soap*, const std::vector<box >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfbox(struct soap*, const char*, int, const std::vector<box >*, const char*);
SOAP_FMAC3 std::vector<box >* SOAP_FMAC4 soap_in_std__vectorTemplateOfbox(struct soap*, const char*, std::vector<box >*, const char*);
SOAP_FMAC1 std::vector<box > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfbox(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<box > * soap_new_std__vectorTemplateOfbox(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfbox(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfbox(struct soap *soap, std::vector<box >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfbox(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfstd__string
#define SOAP_TYPE_std__vectorTemplateOfstd__string (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfstd__string(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfstd__string(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfns__pc
#define SOAP_TYPE_std__vectorTemplateOfns__pc (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__pc(struct soap*, std::vector<struct ns__pc >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__pc(struct soap*, const std::vector<struct ns__pc >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__pc(struct soap*, const char*, int, const std::vector<struct ns__pc >*, const char*);
SOAP_FMAC3 std::vector<struct ns__pc >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns__pc(struct soap*, const char*, std::vector<struct ns__pc >*, const char*);
SOAP_FMAC1 std::vector<struct ns__pc > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__pc(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<struct ns__pc > * soap_new_std__vectorTemplateOfns__pc(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__pc(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns__pc(struct soap *soap, std::vector<struct ns__pc >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns__pc(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
