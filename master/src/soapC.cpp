/* soapC.cpp
   Generated by gSOAP 2.8.17r from search.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.17r 2016-09-20 02:59:00 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_result:
		return soap_in_result(soap, NULL, NULL, "result");
	case SOAP_TYPE_box:
		return soap_in_box(soap, NULL, NULL, "box");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns2__textDetect:
		return soap_in_ns2__textDetect(soap, NULL, NULL, "ns2:textDetect");
	case SOAP_TYPE_ns2__textDetectResponse:
		return soap_in_ns2__textDetectResponse(soap, NULL, NULL, "ns2:textDetectResponse");
	case SOAP_TYPE_ns2__setParams:
		return soap_in_ns2__setParams(soap, NULL, NULL, "ns2:setParams");
	case SOAP_TYPE_ns2__setParamsResponse:
		return soap_in_ns2__setParamsResponse(soap, NULL, NULL, "ns2:setParamsResponse");
	case SOAP_TYPE_ns__quit:
		return soap_in_ns__quit(soap, NULL, NULL, "ns:quit");
	case SOAP_TYPE_ns__quitResponse:
		return soap_in_ns__quitResponse(soap, NULL, NULL, "ns:quitResponse");
	case SOAP_TYPE_ns__pid:
		return soap_in_ns__pid(soap, NULL, NULL, "ns:pid");
	case SOAP_TYPE_ns__pidResponse:
		return soap_in_ns__pidResponse(soap, NULL, NULL, "ns:pidResponse");
	case SOAP_TYPE_ns__clear:
		return soap_in_ns__clear(soap, NULL, NULL, "ns:clear");
	case SOAP_TYPE_ns__clearResponse:
		return soap_in_ns__clearResponse(soap, NULL, NULL, "ns:clearResponse");
	case SOAP_TYPE_ns__progressPCT:
		return soap_in_ns__progressPCT(soap, NULL, NULL, "ns:progressPCT");
	case SOAP_TYPE_ns__progressPCTResponse:
		return soap_in_ns__progressPCTResponse(soap, NULL, NULL, "ns:progressPCTResponse");
	case SOAP_TYPE_ns__state:
		return soap_in_ns__state(soap, NULL, NULL, "ns:state");
	case SOAP_TYPE_ns__stateResponse:
		return soap_in_ns__stateResponse(soap, NULL, NULL, "ns:stateResponse");
	case SOAP_TYPE_ns__serviceRestart:
		return soap_in_ns__serviceRestart(soap, NULL, NULL, "ns:serviceRestart");
	case SOAP_TYPE_ns__serviceRestartResponse:
		return soap_in_ns__serviceRestartResponse(soap, NULL, NULL, "ns:serviceRestartResponse");
	case SOAP_TYPE_ns__serviceStop:
		return soap_in_ns__serviceStop(soap, NULL, NULL, "ns:serviceStop");
	case SOAP_TYPE_ns__serviceStopResponse:
		return soap_in_ns__serviceStopResponse(soap, NULL, NULL, "ns:serviceStopResponse");
	case SOAP_TYPE_ns__imSearch:
		return soap_in_ns__imSearch(soap, NULL, NULL, "ns:imSearch");
	case SOAP_TYPE_ns__serviceStart:
		return soap_in_ns__serviceStart(soap, NULL, NULL, "ns:serviceStart");
	case SOAP_TYPE_ns__serviceStartResponse:
		return soap_in_ns__serviceStartResponse(soap, NULL, NULL, "ns:serviceStartResponse");
	case SOAP_TYPE_ns__trainDelete:
		return soap_in_ns__trainDelete(soap, NULL, NULL, "ns:trainDelete");
	case SOAP_TYPE_ns__trainDeleteResponse:
		return soap_in_ns__trainDeleteResponse(soap, NULL, NULL, "ns:trainDeleteResponse");
	case SOAP_TYPE_ns__trainAdd:
		return soap_in_ns__trainAdd(soap, NULL, NULL, "ns:trainAdd");
	case SOAP_TYPE_ns__trainAddResponse:
		return soap_in_ns__trainAddResponse(soap, NULL, NULL, "ns:trainAddResponse");
	case SOAP_TYPE_ns__train:
		return soap_in_ns__train(soap, NULL, NULL, "ns:train");
	case SOAP_TYPE_ns__trainResponse:
		return soap_in_ns__trainResponse(soap, NULL, NULL, "ns:trainResponse");
	case SOAP_TYPE_ns__serviceInit:
		return soap_in_ns__serviceInit(soap, NULL, NULL, "ns:serviceInit");
	case SOAP_TYPE_ns__serviceInitResponse:
		return soap_in_ns__serviceInitResponse(soap, NULL, NULL, "ns:serviceInitResponse");
	case SOAP_TYPE_ns__searchResponse:
		return soap_in_ns__searchResponse(soap, NULL, NULL, "ns:searchResponse");
	case SOAP_TYPE_ns__pc:
		return soap_in_ns__pc(soap, NULL, NULL, "ns:pc");
	case SOAP_TYPE_PointerToresult:
		return soap_in_PointerToresult(soap, NULL, NULL, "result");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_PointerTofloat:
		return soap_in_PointerTofloat(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_PointerTons__searchResponse:
		return soap_in_PointerTons__searchResponse(soap, NULL, NULL, "ns:searchResponse");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "result"))
		{	*type = SOAP_TYPE_result;
			return soap_in_result(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "box"))
		{	*type = SOAP_TYPE_box;
			return soap_in_box(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:textDetect"))
		{	*type = SOAP_TYPE_ns2__textDetect;
			return soap_in_ns2__textDetect(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:textDetectResponse"))
		{	*type = SOAP_TYPE_ns2__textDetectResponse;
			return soap_in_ns2__textDetectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:setParams"))
		{	*type = SOAP_TYPE_ns2__setParams;
			return soap_in_ns2__setParams(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns2:setParamsResponse"))
		{	*type = SOAP_TYPE_ns2__setParamsResponse;
			return soap_in_ns2__setParamsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:quit"))
		{	*type = SOAP_TYPE_ns__quit;
			return soap_in_ns__quit(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:quitResponse"))
		{	*type = SOAP_TYPE_ns__quitResponse;
			return soap_in_ns__quitResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:pid"))
		{	*type = SOAP_TYPE_ns__pid;
			return soap_in_ns__pid(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:pidResponse"))
		{	*type = SOAP_TYPE_ns__pidResponse;
			return soap_in_ns__pidResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:clear"))
		{	*type = SOAP_TYPE_ns__clear;
			return soap_in_ns__clear(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:clearResponse"))
		{	*type = SOAP_TYPE_ns__clearResponse;
			return soap_in_ns__clearResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:progressPCT"))
		{	*type = SOAP_TYPE_ns__progressPCT;
			return soap_in_ns__progressPCT(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:progressPCTResponse"))
		{	*type = SOAP_TYPE_ns__progressPCTResponse;
			return soap_in_ns__progressPCTResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:state"))
		{	*type = SOAP_TYPE_ns__state;
			return soap_in_ns__state(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:stateResponse"))
		{	*type = SOAP_TYPE_ns__stateResponse;
			return soap_in_ns__stateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:serviceRestart"))
		{	*type = SOAP_TYPE_ns__serviceRestart;
			return soap_in_ns__serviceRestart(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:serviceRestartResponse"))
		{	*type = SOAP_TYPE_ns__serviceRestartResponse;
			return soap_in_ns__serviceRestartResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:serviceStop"))
		{	*type = SOAP_TYPE_ns__serviceStop;
			return soap_in_ns__serviceStop(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:serviceStopResponse"))
		{	*type = SOAP_TYPE_ns__serviceStopResponse;
			return soap_in_ns__serviceStopResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:imSearch"))
		{	*type = SOAP_TYPE_ns__imSearch;
			return soap_in_ns__imSearch(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:serviceStart"))
		{	*type = SOAP_TYPE_ns__serviceStart;
			return soap_in_ns__serviceStart(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:serviceStartResponse"))
		{	*type = SOAP_TYPE_ns__serviceStartResponse;
			return soap_in_ns__serviceStartResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:trainDelete"))
		{	*type = SOAP_TYPE_ns__trainDelete;
			return soap_in_ns__trainDelete(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:trainDeleteResponse"))
		{	*type = SOAP_TYPE_ns__trainDeleteResponse;
			return soap_in_ns__trainDeleteResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:trainAdd"))
		{	*type = SOAP_TYPE_ns__trainAdd;
			return soap_in_ns__trainAdd(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:trainAddResponse"))
		{	*type = SOAP_TYPE_ns__trainAddResponse;
			return soap_in_ns__trainAddResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:train"))
		{	*type = SOAP_TYPE_ns__train;
			return soap_in_ns__train(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:trainResponse"))
		{	*type = SOAP_TYPE_ns__trainResponse;
			return soap_in_ns__trainResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:serviceInit"))
		{	*type = SOAP_TYPE_ns__serviceInit;
			return soap_in_ns__serviceInit(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:serviceInitResponse"))
		{	*type = SOAP_TYPE_ns__serviceInitResponse;
			return soap_in_ns__serviceInitResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:searchResponse"))
		{	*type = SOAP_TYPE_ns__searchResponse;
			return soap_in_ns__searchResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:pc"))
		{	*type = SOAP_TYPE_ns__pc;
			return soap_in_ns__pc(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_result:
		return ((result *)ptr)->soap_out(soap, tag, id, "result");
	case SOAP_TYPE_box:
		return ((box *)ptr)->soap_out(soap, tag, id, "box");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_ns2__textDetect:
		return soap_out_ns2__textDetect(soap, tag, id, (const struct ns2__textDetect *)ptr, "ns2:textDetect");
	case SOAP_TYPE_ns2__textDetectResponse:
		return soap_out_ns2__textDetectResponse(soap, tag, id, (const struct ns2__textDetectResponse *)ptr, "ns2:textDetectResponse");
	case SOAP_TYPE_ns2__setParams:
		return soap_out_ns2__setParams(soap, tag, id, (const struct ns2__setParams *)ptr, "ns2:setParams");
	case SOAP_TYPE_ns2__setParamsResponse:
		return soap_out_ns2__setParamsResponse(soap, tag, id, (const struct ns2__setParamsResponse *)ptr, "ns2:setParamsResponse");
	case SOAP_TYPE_ns__quit:
		return soap_out_ns__quit(soap, tag, id, (const struct ns__quit *)ptr, "ns:quit");
	case SOAP_TYPE_ns__quitResponse:
		return soap_out_ns__quitResponse(soap, tag, id, (const struct ns__quitResponse *)ptr, "ns:quitResponse");
	case SOAP_TYPE_ns__pid:
		return soap_out_ns__pid(soap, tag, id, (const struct ns__pid *)ptr, "ns:pid");
	case SOAP_TYPE_ns__pidResponse:
		return soap_out_ns__pidResponse(soap, tag, id, (const struct ns__pidResponse *)ptr, "ns:pidResponse");
	case SOAP_TYPE_ns__clear:
		return soap_out_ns__clear(soap, tag, id, (const struct ns__clear *)ptr, "ns:clear");
	case SOAP_TYPE_ns__clearResponse:
		return soap_out_ns__clearResponse(soap, tag, id, (const struct ns__clearResponse *)ptr, "ns:clearResponse");
	case SOAP_TYPE_ns__progressPCT:
		return soap_out_ns__progressPCT(soap, tag, id, (const struct ns__progressPCT *)ptr, "ns:progressPCT");
	case SOAP_TYPE_ns__progressPCTResponse:
		return soap_out_ns__progressPCTResponse(soap, tag, id, (const struct ns__progressPCTResponse *)ptr, "ns:progressPCTResponse");
	case SOAP_TYPE_ns__state:
		return soap_out_ns__state(soap, tag, id, (const struct ns__state *)ptr, "ns:state");
	case SOAP_TYPE_ns__stateResponse:
		return soap_out_ns__stateResponse(soap, tag, id, (const struct ns__stateResponse *)ptr, "ns:stateResponse");
	case SOAP_TYPE_ns__serviceRestart:
		return soap_out_ns__serviceRestart(soap, tag, id, (const struct ns__serviceRestart *)ptr, "ns:serviceRestart");
	case SOAP_TYPE_ns__serviceRestartResponse:
		return soap_out_ns__serviceRestartResponse(soap, tag, id, (const struct ns__serviceRestartResponse *)ptr, "ns:serviceRestartResponse");
	case SOAP_TYPE_ns__serviceStop:
		return soap_out_ns__serviceStop(soap, tag, id, (const struct ns__serviceStop *)ptr, "ns:serviceStop");
	case SOAP_TYPE_ns__serviceStopResponse:
		return soap_out_ns__serviceStopResponse(soap, tag, id, (const struct ns__serviceStopResponse *)ptr, "ns:serviceStopResponse");
	case SOAP_TYPE_ns__imSearch:
		return soap_out_ns__imSearch(soap, tag, id, (const struct ns__imSearch *)ptr, "ns:imSearch");
	case SOAP_TYPE_ns__serviceStart:
		return soap_out_ns__serviceStart(soap, tag, id, (const struct ns__serviceStart *)ptr, "ns:serviceStart");
	case SOAP_TYPE_ns__serviceStartResponse:
		return soap_out_ns__serviceStartResponse(soap, tag, id, (const struct ns__serviceStartResponse *)ptr, "ns:serviceStartResponse");
	case SOAP_TYPE_ns__trainDelete:
		return soap_out_ns__trainDelete(soap, tag, id, (const struct ns__trainDelete *)ptr, "ns:trainDelete");
	case SOAP_TYPE_ns__trainDeleteResponse:
		return soap_out_ns__trainDeleteResponse(soap, tag, id, (const struct ns__trainDeleteResponse *)ptr, "ns:trainDeleteResponse");
	case SOAP_TYPE_ns__trainAdd:
		return soap_out_ns__trainAdd(soap, tag, id, (const struct ns__trainAdd *)ptr, "ns:trainAdd");
	case SOAP_TYPE_ns__trainAddResponse:
		return soap_out_ns__trainAddResponse(soap, tag, id, (const struct ns__trainAddResponse *)ptr, "ns:trainAddResponse");
	case SOAP_TYPE_ns__train:
		return soap_out_ns__train(soap, tag, id, (const struct ns__train *)ptr, "ns:train");
	case SOAP_TYPE_ns__trainResponse:
		return soap_out_ns__trainResponse(soap, tag, id, (const struct ns__trainResponse *)ptr, "ns:trainResponse");
	case SOAP_TYPE_ns__serviceInit:
		return soap_out_ns__serviceInit(soap, tag, id, (const struct ns__serviceInit *)ptr, "ns:serviceInit");
	case SOAP_TYPE_ns__serviceInitResponse:
		return soap_out_ns__serviceInitResponse(soap, tag, id, (const struct ns__serviceInitResponse *)ptr, "ns:serviceInitResponse");
	case SOAP_TYPE_ns__searchResponse:
		return soap_out_ns__searchResponse(soap, tag, id, (const struct ns__searchResponse *)ptr, "ns:searchResponse");
	case SOAP_TYPE_ns__pc:
		return soap_out_ns__pc(soap, tag, id, (const struct ns__pc *)ptr, "ns:pc");
	case SOAP_TYPE_PointerToresult:
		return soap_out_PointerToresult(soap, tag, id, (result *const*)ptr, "result");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_PointerTofloat:
		return soap_out_PointerTofloat(soap, tag, id, (float *const*)ptr, "xsd:float");
	case SOAP_TYPE_PointerTons__searchResponse:
		return soap_out_PointerTons__searchResponse(soap, tag, id, (struct ns__searchResponse *const*)ptr, "ns:searchResponse");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_result:
		((result *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_box:
		((box *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_ns2__textDetect:
		soap_serialize_ns2__textDetect(soap, (const struct ns2__textDetect *)ptr);
		break;
	case SOAP_TYPE_ns2__textDetectResponse:
		soap_serialize_ns2__textDetectResponse(soap, (const struct ns2__textDetectResponse *)ptr);
		break;
	case SOAP_TYPE_ns2__setParams:
		soap_serialize_ns2__setParams(soap, (const struct ns2__setParams *)ptr);
		break;
	case SOAP_TYPE_ns2__setParamsResponse:
		soap_serialize_ns2__setParamsResponse(soap, (const struct ns2__setParamsResponse *)ptr);
		break;
	case SOAP_TYPE_ns__quit:
		soap_serialize_ns__quit(soap, (const struct ns__quit *)ptr);
		break;
	case SOAP_TYPE_ns__quitResponse:
		soap_serialize_ns__quitResponse(soap, (const struct ns__quitResponse *)ptr);
		break;
	case SOAP_TYPE_ns__pid:
		soap_serialize_ns__pid(soap, (const struct ns__pid *)ptr);
		break;
	case SOAP_TYPE_ns__pidResponse:
		soap_serialize_ns__pidResponse(soap, (const struct ns__pidResponse *)ptr);
		break;
	case SOAP_TYPE_ns__clear:
		soap_serialize_ns__clear(soap, (const struct ns__clear *)ptr);
		break;
	case SOAP_TYPE_ns__clearResponse:
		soap_serialize_ns__clearResponse(soap, (const struct ns__clearResponse *)ptr);
		break;
	case SOAP_TYPE_ns__progressPCT:
		soap_serialize_ns__progressPCT(soap, (const struct ns__progressPCT *)ptr);
		break;
	case SOAP_TYPE_ns__progressPCTResponse:
		soap_serialize_ns__progressPCTResponse(soap, (const struct ns__progressPCTResponse *)ptr);
		break;
	case SOAP_TYPE_ns__state:
		soap_serialize_ns__state(soap, (const struct ns__state *)ptr);
		break;
	case SOAP_TYPE_ns__stateResponse:
		soap_serialize_ns__stateResponse(soap, (const struct ns__stateResponse *)ptr);
		break;
	case SOAP_TYPE_ns__serviceRestart:
		soap_serialize_ns__serviceRestart(soap, (const struct ns__serviceRestart *)ptr);
		break;
	case SOAP_TYPE_ns__serviceRestartResponse:
		soap_serialize_ns__serviceRestartResponse(soap, (const struct ns__serviceRestartResponse *)ptr);
		break;
	case SOAP_TYPE_ns__serviceStop:
		soap_serialize_ns__serviceStop(soap, (const struct ns__serviceStop *)ptr);
		break;
	case SOAP_TYPE_ns__serviceStopResponse:
		soap_serialize_ns__serviceStopResponse(soap, (const struct ns__serviceStopResponse *)ptr);
		break;
	case SOAP_TYPE_ns__imSearch:
		soap_serialize_ns__imSearch(soap, (const struct ns__imSearch *)ptr);
		break;
	case SOAP_TYPE_ns__serviceStart:
		soap_serialize_ns__serviceStart(soap, (const struct ns__serviceStart *)ptr);
		break;
	case SOAP_TYPE_ns__serviceStartResponse:
		soap_serialize_ns__serviceStartResponse(soap, (const struct ns__serviceStartResponse *)ptr);
		break;
	case SOAP_TYPE_ns__trainDelete:
		soap_serialize_ns__trainDelete(soap, (const struct ns__trainDelete *)ptr);
		break;
	case SOAP_TYPE_ns__trainDeleteResponse:
		soap_serialize_ns__trainDeleteResponse(soap, (const struct ns__trainDeleteResponse *)ptr);
		break;
	case SOAP_TYPE_ns__trainAdd:
		soap_serialize_ns__trainAdd(soap, (const struct ns__trainAdd *)ptr);
		break;
	case SOAP_TYPE_ns__trainAddResponse:
		soap_serialize_ns__trainAddResponse(soap, (const struct ns__trainAddResponse *)ptr);
		break;
	case SOAP_TYPE_ns__train:
		soap_serialize_ns__train(soap, (const struct ns__train *)ptr);
		break;
	case SOAP_TYPE_ns__trainResponse:
		soap_serialize_ns__trainResponse(soap, (const struct ns__trainResponse *)ptr);
		break;
	case SOAP_TYPE_ns__serviceInit:
		soap_serialize_ns__serviceInit(soap, (const struct ns__serviceInit *)ptr);
		break;
	case SOAP_TYPE_ns__serviceInitResponse:
		soap_serialize_ns__serviceInitResponse(soap, (const struct ns__serviceInitResponse *)ptr);
		break;
	case SOAP_TYPE_ns__searchResponse:
		soap_serialize_ns__searchResponse(soap, (const struct ns__searchResponse *)ptr);
		break;
	case SOAP_TYPE_ns__pc:
		soap_serialize_ns__pc(soap, (const struct ns__pc *)ptr);
		break;
	case SOAP_TYPE_PointerToresult:
		soap_serialize_PointerToresult(soap, (result *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_PointerTofloat:
		soap_serialize_PointerTofloat(soap, (float *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons__searchResponse:
		soap_serialize_PointerTons__searchResponse(soap, (struct ns__searchResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__pc:
		return (void*)soap_instantiate_ns__pc(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__searchResponse:
		return (void*)soap_instantiate_ns__searchResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__serviceInitResponse:
		return (void*)soap_instantiate_ns__serviceInitResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__serviceInit:
		return (void*)soap_instantiate_ns__serviceInit(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__trainResponse:
		return (void*)soap_instantiate_ns__trainResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__train:
		return (void*)soap_instantiate_ns__train(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__trainAddResponse:
		return (void*)soap_instantiate_ns__trainAddResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__trainAdd:
		return (void*)soap_instantiate_ns__trainAdd(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__trainDeleteResponse:
		return (void*)soap_instantiate_ns__trainDeleteResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__trainDelete:
		return (void*)soap_instantiate_ns__trainDelete(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__serviceStartResponse:
		return (void*)soap_instantiate_ns__serviceStartResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__serviceStart:
		return (void*)soap_instantiate_ns__serviceStart(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__imSearch:
		return (void*)soap_instantiate_ns__imSearch(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__serviceStopResponse:
		return (void*)soap_instantiate_ns__serviceStopResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__serviceStop:
		return (void*)soap_instantiate_ns__serviceStop(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__serviceRestartResponse:
		return (void*)soap_instantiate_ns__serviceRestartResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__serviceRestart:
		return (void*)soap_instantiate_ns__serviceRestart(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__stateResponse:
		return (void*)soap_instantiate_ns__stateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__state:
		return (void*)soap_instantiate_ns__state(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__progressPCTResponse:
		return (void*)soap_instantiate_ns__progressPCTResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__progressPCT:
		return (void*)soap_instantiate_ns__progressPCT(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__clearResponse:
		return (void*)soap_instantiate_ns__clearResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__clear:
		return (void*)soap_instantiate_ns__clear(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__pidResponse:
		return (void*)soap_instantiate_ns__pidResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__pid:
		return (void*)soap_instantiate_ns__pid(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__quitResponse:
		return (void*)soap_instantiate_ns__quitResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns__quit:
		return (void*)soap_instantiate_ns__quit(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_box:
		return (void*)soap_instantiate_box(soap, -1, type, arrayType, n);
	case SOAP_TYPE_result:
		return (void*)soap_instantiate_result(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__setParamsResponse:
		return (void*)soap_instantiate_ns2__setParamsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__setParams:
		return (void*)soap_instantiate_ns2__setParams(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__textDetectResponse:
		return (void*)soap_instantiate_ns2__textDetectResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns2__textDetect:
		return (void*)soap_instantiate_ns2__textDetect(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_std__vectorTemplateOfbox:
		return (void*)soap_instantiate_std__vectorTemplateOfbox(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOfns__pc:
		return (void*)soap_instantiate_std__vectorTemplateOfns__pc(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_ns__pc:
		if (p->size < 0)
			SOAP_DELETE((struct ns__pc*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__pc*)p->ptr);
		break;
	case SOAP_TYPE_ns__searchResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__searchResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__searchResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__serviceInitResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__serviceInitResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__serviceInitResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__serviceInit:
		if (p->size < 0)
			SOAP_DELETE((struct ns__serviceInit*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__serviceInit*)p->ptr);
		break;
	case SOAP_TYPE_ns__trainResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__trainResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__trainResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__train:
		if (p->size < 0)
			SOAP_DELETE((struct ns__train*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__train*)p->ptr);
		break;
	case SOAP_TYPE_ns__trainAddResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__trainAddResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__trainAddResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__trainAdd:
		if (p->size < 0)
			SOAP_DELETE((struct ns__trainAdd*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__trainAdd*)p->ptr);
		break;
	case SOAP_TYPE_ns__trainDeleteResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__trainDeleteResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__trainDeleteResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__trainDelete:
		if (p->size < 0)
			SOAP_DELETE((struct ns__trainDelete*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__trainDelete*)p->ptr);
		break;
	case SOAP_TYPE_ns__serviceStartResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__serviceStartResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__serviceStartResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__serviceStart:
		if (p->size < 0)
			SOAP_DELETE((struct ns__serviceStart*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__serviceStart*)p->ptr);
		break;
	case SOAP_TYPE_ns__imSearch:
		if (p->size < 0)
			SOAP_DELETE((struct ns__imSearch*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__imSearch*)p->ptr);
		break;
	case SOAP_TYPE_ns__serviceStopResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__serviceStopResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__serviceStopResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__serviceStop:
		if (p->size < 0)
			SOAP_DELETE((struct ns__serviceStop*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__serviceStop*)p->ptr);
		break;
	case SOAP_TYPE_ns__serviceRestartResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__serviceRestartResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__serviceRestartResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__serviceRestart:
		if (p->size < 0)
			SOAP_DELETE((struct ns__serviceRestart*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__serviceRestart*)p->ptr);
		break;
	case SOAP_TYPE_ns__stateResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__stateResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__stateResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__state:
		if (p->size < 0)
			SOAP_DELETE((struct ns__state*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__state*)p->ptr);
		break;
	case SOAP_TYPE_ns__progressPCTResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__progressPCTResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__progressPCTResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__progressPCT:
		if (p->size < 0)
			SOAP_DELETE((struct ns__progressPCT*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__progressPCT*)p->ptr);
		break;
	case SOAP_TYPE_ns__clearResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__clearResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__clearResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__clear:
		if (p->size < 0)
			SOAP_DELETE((struct ns__clear*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__clear*)p->ptr);
		break;
	case SOAP_TYPE_ns__pidResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__pidResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__pidResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__pid:
		if (p->size < 0)
			SOAP_DELETE((struct ns__pid*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__pid*)p->ptr);
		break;
	case SOAP_TYPE_ns__quitResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__quitResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__quitResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns__quit:
		if (p->size < 0)
			SOAP_DELETE((struct ns__quit*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__quit*)p->ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary*)p->ptr);
		break;
	case SOAP_TYPE_box:
		if (p->size < 0)
			SOAP_DELETE((box*)p->ptr);
		else
			SOAP_DELETE_ARRAY((box*)p->ptr);
		break;
	case SOAP_TYPE_result:
		if (p->size < 0)
			SOAP_DELETE((result*)p->ptr);
		else
			SOAP_DELETE_ARRAY((result*)p->ptr);
		break;
	case SOAP_TYPE_ns2__setParamsResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__setParamsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__setParamsResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__setParams:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__setParams*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__setParams*)p->ptr);
		break;
	case SOAP_TYPE_ns2__textDetectResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__textDetectResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__textDetectResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns2__textDetect:
		if (p->size < 0)
			SOAP_DELETE((struct ns2__textDetect*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns2__textDetect*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_std__vectorTemplateOfbox:
		if (p->size < 0)
			SOAP_DELETE((std::vector<box >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<box >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE((std::vector<std::string >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<std::string >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOfns__pc:
		if (p->size < 0)
			SOAP_DELETE((std::vector<struct ns__pc >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<struct ns__pc >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOfbox:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<box >*)p)[len] = *(box *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfstd__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<std::string >*)p)[len] = *(std::string *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOfns__pc:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<struct ns__pc >*)p)[len] = *(struct ns__pc *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void result::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_int(soap, &this->result::state);
	soap_default_std__vectorTemplateOfbox(soap, &this->result::boxes);
	this->result::image.xsd__base64Binary::soap_default(soap);
}

void result::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->result::state, SOAP_TYPE_int);
	soap_serialize_std__vectorTemplateOfbox(soap, &this->result::boxes);
	this->result::image.soap_serialize(soap);
#endif
}

int result::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_result(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_result(struct soap *soap, const char *tag, int id, const result *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_result), type))
		return soap->error;
	if (soap_out_int(soap, "state", -1, &(a->result::state), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfbox(soap, "boxes", -1, &(a->result::boxes), ""))
		return soap->error;
	if ((a->result::image).soap_out(soap, "image", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *result::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_result(soap, tag, this, type);
}

SOAP_FMAC3 result * SOAP_FMAC4 soap_in_result(struct soap *soap, const char *tag, result *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (result *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_result, sizeof(result), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_result)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (result *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_state1 = 1;
	size_t soap_flag_image1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_state1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "state", &(a->result::state), "xsd:int"))
				{	soap_flag_state1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfbox(soap, "boxes", &(a->result::boxes), "box"))
					continue;
			if (soap_flag_image1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->result::image).soap_in(soap, "image", "xsd:base64Binary"))
				{	soap_flag_image1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (result *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_result, 0, sizeof(result), 0, soap_copy_result);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_state1 > 0 || soap_flag_image1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int result::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_result);
	if (this->soap_out(soap, tag?tag:"result", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *result::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_result(soap, this, tag, type);
}

SOAP_FMAC3 result * SOAP_FMAC4 soap_get_result(struct soap *soap, result *p, const char *tag, const char *type)
{
	if ((p = soap_in_result(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 result * SOAP_FMAC2 soap_instantiate_result(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_result(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_result, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(result);
		if (size)
			*size = sizeof(result);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(result, n);
		if (size)
			*size = n * sizeof(result);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (result*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_result(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying result %p -> %p\n", q, p));
	*(result*)p = *(result*)q;
}

void box::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_int(soap, &this->box::x);
	soap_default_int(soap, &this->box::width);
	soap_default_int(soap, &this->box::y);
	soap_default_int(soap, &this->box::height);
	soap_default_std__vectorTemplateOfstd__string(soap, &this->box::words);
}

void box::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->box::x, SOAP_TYPE_int);
	soap_embedded(soap, &this->box::width, SOAP_TYPE_int);
	soap_embedded(soap, &this->box::y, SOAP_TYPE_int);
	soap_embedded(soap, &this->box::height, SOAP_TYPE_int);
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->box::words);
#endif
}

int box::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_box(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_box(struct soap *soap, const char *tag, int id, const box *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_box), type))
		return soap->error;
	if (soap_out_int(soap, "x", -1, &(a->box::x), ""))
		return soap->error;
	if (soap_out_int(soap, "width", -1, &(a->box::width), ""))
		return soap->error;
	if (soap_out_int(soap, "y", -1, &(a->box::y), ""))
		return soap->error;
	if (soap_out_int(soap, "height", -1, &(a->box::height), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "words", -1, &(a->box::words), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *box::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_box(soap, tag, this, type);
}

SOAP_FMAC3 box * SOAP_FMAC4 soap_in_box(struct soap *soap, const char *tag, box *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (box *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_box, sizeof(box), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_box)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (box *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_x1 = 1;
	size_t soap_flag_width1 = 1;
	size_t soap_flag_y1 = 1;
	size_t soap_flag_height1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_x1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "x", &(a->box::x), "xsd:int"))
				{	soap_flag_x1--;
					continue;
				}
			if (soap_flag_width1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "width", &(a->box::width), "xsd:int"))
				{	soap_flag_width1--;
					continue;
				}
			if (soap_flag_y1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "y", &(a->box::y), "xsd:int"))
				{	soap_flag_y1--;
					continue;
				}
			if (soap_flag_height1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "height", &(a->box::height), "xsd:int"))
				{	soap_flag_height1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfstd__string(soap, "words", &(a->box::words), "xsd:string"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (box *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_box, 0, sizeof(box), 0, soap_copy_box);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_x1 > 0 || soap_flag_width1 > 0 || soap_flag_y1 > 0 || soap_flag_height1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int box::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_box);
	if (this->soap_out(soap, tag?tag:"box", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *box::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_box(soap, this, tag, type);
}

SOAP_FMAC3 box * SOAP_FMAC4 soap_get_box(struct soap *soap, box *p, const char *tag, const char *type)
{
	if ((p = soap_in_box(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 box * SOAP_FMAC2 soap_instantiate_box(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_box(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_box, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(box);
		if (size)
			*size = sizeof(box);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(box, n);
		if (size)
			*size = n * sizeof(box);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (box*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_box(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying box %p -> %p\n", q, p));
	*(box*)p = *(box*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->__size = 0;
	this->__ptr = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	if (this->__ptr)
		soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary);
#endif
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary);
		if (size)
			*size = sizeof(xsd__base64Binary);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(xsd__base64Binary, n);
		if (size)
			*size = n * sizeof(xsd__base64Binary);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__textDetect(struct soap *soap, struct ns2__textDetect *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->input.xsd__base64Binary::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__textDetect(struct soap *soap, const struct ns2__textDetect *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->input.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__textDetect(struct soap *soap, const char *tag, int id, const struct ns2__textDetect *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__textDetect), type))
		return soap->error;
	if (a->input.soap_out(soap, "input", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__textDetect * SOAP_FMAC4 soap_in_ns2__textDetect(struct soap *soap, const char *tag, struct ns2__textDetect *a, const char *type)
{
	size_t soap_flag_input = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__textDetect *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__textDetect, sizeof(struct ns2__textDetect), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns2__textDetect(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_input && soap->error == SOAP_TAG_MISMATCH)
				if (a->input.soap_in(soap, "input", "xsd:base64Binary"))
				{	soap_flag_input--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__textDetect *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__textDetect, 0, sizeof(struct ns2__textDetect), 0, soap_copy_ns2__textDetect);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_input > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__textDetect(struct soap *soap, const struct ns2__textDetect *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__textDetect);
	if (soap_out_ns2__textDetect(soap, tag?tag:"ns2:textDetect", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__textDetect * SOAP_FMAC4 soap_get_ns2__textDetect(struct soap *soap, struct ns2__textDetect *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__textDetect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__textDetect * SOAP_FMAC2 soap_instantiate_ns2__textDetect(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__textDetect(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__textDetect, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__textDetect);
		if (size)
			*size = sizeof(struct ns2__textDetect);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__textDetect, n);
		if (size)
			*size = n * sizeof(struct ns2__textDetect);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__textDetect*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__textDetect(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__textDetect %p -> %p\n", q, p));
	*(struct ns2__textDetect*)p = *(struct ns2__textDetect*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__textDetectResponse(struct soap *soap, struct ns2__textDetectResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->output = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__textDetectResponse(struct soap *soap, const struct ns2__textDetectResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToresult(soap, &a->output);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__textDetectResponse(struct soap *soap, const char *tag, int id, const struct ns2__textDetectResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__textDetectResponse), type))
		return soap->error;
	if (soap_out_PointerToresult(soap, "output", -1, &a->output, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__textDetectResponse * SOAP_FMAC4 soap_in_ns2__textDetectResponse(struct soap *soap, const char *tag, struct ns2__textDetectResponse *a, const char *type)
{
	size_t soap_flag_output = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__textDetectResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__textDetectResponse, sizeof(struct ns2__textDetectResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__textDetectResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_output && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToresult(soap, "output", &a->output, "result"))
				{	soap_flag_output--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__textDetectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__textDetectResponse, 0, sizeof(struct ns2__textDetectResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__textDetectResponse(struct soap *soap, const struct ns2__textDetectResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__textDetectResponse);
	if (soap_out_ns2__textDetectResponse(soap, tag?tag:"ns2:textDetectResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__textDetectResponse * SOAP_FMAC4 soap_get_ns2__textDetectResponse(struct soap *soap, struct ns2__textDetectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__textDetectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__textDetectResponse * SOAP_FMAC2 soap_instantiate_ns2__textDetectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__textDetectResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__textDetectResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__textDetectResponse);
		if (size)
			*size = sizeof(struct ns2__textDetectResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__textDetectResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__textDetectResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__textDetectResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__textDetectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__textDetectResponse %p -> %p\n", q, p));
	*(struct ns2__textDetectResponse*)p = *(struct ns2__textDetectResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__setParams(struct soap *soap, struct ns2__setParams *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->input);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__setParams(struct soap *soap, const struct ns2__setParams *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->input, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__setParams(struct soap *soap, const char *tag, int id, const struct ns2__setParams *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__setParams), type))
		return soap->error;
	if (soap_out_int(soap, "input", -1, &a->input, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__setParams * SOAP_FMAC4 soap_in_ns2__setParams(struct soap *soap, const char *tag, struct ns2__setParams *a, const char *type)
{
	size_t soap_flag_input = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__setParams *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__setParams, sizeof(struct ns2__setParams), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__setParams(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_input && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "input", &a->input, "xsd:int"))
				{	soap_flag_input--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__setParams *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__setParams, 0, sizeof(struct ns2__setParams), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_input > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__setParams(struct soap *soap, const struct ns2__setParams *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__setParams);
	if (soap_out_ns2__setParams(soap, tag?tag:"ns2:setParams", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__setParams * SOAP_FMAC4 soap_get_ns2__setParams(struct soap *soap, struct ns2__setParams *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__setParams(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__setParams * SOAP_FMAC2 soap_instantiate_ns2__setParams(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__setParams(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__setParams, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__setParams);
		if (size)
			*size = sizeof(struct ns2__setParams);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__setParams, n);
		if (size)
			*size = n * sizeof(struct ns2__setParams);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__setParams*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__setParams(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__setParams %p -> %p\n", q, p));
	*(struct ns2__setParams*)p = *(struct ns2__setParams*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__setParamsResponse(struct soap *soap, struct ns2__setParamsResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->output = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__setParamsResponse(struct soap *soap, const struct ns2__setParamsResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->output);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__setParamsResponse(struct soap *soap, const char *tag, int id, const struct ns2__setParamsResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns2__setParamsResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "output", -1, &a->output, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns2__setParamsResponse * SOAP_FMAC4 soap_in_ns2__setParamsResponse(struct soap *soap, const char *tag, struct ns2__setParamsResponse *a, const char *type)
{
	size_t soap_flag_output = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns2__setParamsResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns2__setParamsResponse, sizeof(struct ns2__setParamsResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns2__setParamsResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_output && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "output", &a->output, "xsd:int"))
				{	soap_flag_output--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns2__setParamsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns2__setParamsResponse, 0, sizeof(struct ns2__setParamsResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__setParamsResponse(struct soap *soap, const struct ns2__setParamsResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns2__setParamsResponse);
	if (soap_out_ns2__setParamsResponse(soap, tag?tag:"ns2:setParamsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns2__setParamsResponse * SOAP_FMAC4 soap_get_ns2__setParamsResponse(struct soap *soap, struct ns2__setParamsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns2__setParamsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns2__setParamsResponse * SOAP_FMAC2 soap_instantiate_ns2__setParamsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns2__setParamsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns2__setParamsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns2__setParamsResponse);
		if (size)
			*size = sizeof(struct ns2__setParamsResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns2__setParamsResponse, n);
		if (size)
			*size = n * sizeof(struct ns2__setParamsResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns2__setParamsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__setParamsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns2__setParamsResponse %p -> %p\n", q, p));
	*(struct ns2__setParamsResponse*)p = *(struct ns2__setParamsResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__quit(struct soap *soap, struct ns__quit *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__quit(struct soap *soap, const struct ns__quit *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__quit(struct soap *soap, const char *tag, int id, const struct ns__quit *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__quit), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__quit * SOAP_FMAC4 soap_in_ns__quit(struct soap *soap, const char *tag, struct ns__quit *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__quit *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__quit, sizeof(struct ns__quit), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__quit(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__quit *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__quit, 0, sizeof(struct ns__quit), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__quit(struct soap *soap, const struct ns__quit *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__quit);
	if (soap_out_ns__quit(soap, tag?tag:"ns:quit", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__quit * SOAP_FMAC4 soap_get_ns__quit(struct soap *soap, struct ns__quit *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__quit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__quit * SOAP_FMAC2 soap_instantiate_ns__quit(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__quit(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__quit, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__quit);
		if (size)
			*size = sizeof(struct ns__quit);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__quit, n);
		if (size)
			*size = n * sizeof(struct ns__quit);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__quit*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__quit(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__quit %p -> %p\n", q, p));
	*(struct ns__quit*)p = *(struct ns__quit*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__quitResponse(struct soap *soap, struct ns__quitResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__quitResponse(struct soap *soap, const struct ns__quitResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->tag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__quitResponse(struct soap *soap, const char *tag, int id, const struct ns__quitResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__quitResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__quitResponse * SOAP_FMAC4 soap_in_ns__quitResponse(struct soap *soap, const char *tag, struct ns__quitResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__quitResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__quitResponse, sizeof(struct ns__quitResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__quitResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tag", &a->tag, "xsd:int"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__quitResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__quitResponse, 0, sizeof(struct ns__quitResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__quitResponse(struct soap *soap, const struct ns__quitResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__quitResponse);
	if (soap_out_ns__quitResponse(soap, tag?tag:"ns:quitResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__quitResponse * SOAP_FMAC4 soap_get_ns__quitResponse(struct soap *soap, struct ns__quitResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__quitResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__quitResponse * SOAP_FMAC2 soap_instantiate_ns__quitResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__quitResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__quitResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__quitResponse);
		if (size)
			*size = sizeof(struct ns__quitResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__quitResponse, n);
		if (size)
			*size = n * sizeof(struct ns__quitResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__quitResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__quitResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__quitResponse %p -> %p\n", q, p));
	*(struct ns__quitResponse*)p = *(struct ns__quitResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__pid(struct soap *soap, struct ns__pid *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__pid(struct soap *soap, const struct ns__pid *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__pid(struct soap *soap, const char *tag, int id, const struct ns__pid *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__pid), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__pid * SOAP_FMAC4 soap_in_ns__pid(struct soap *soap, const char *tag, struct ns__pid *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__pid *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__pid, sizeof(struct ns__pid), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__pid(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__pid *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__pid, 0, sizeof(struct ns__pid), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__pid(struct soap *soap, const struct ns__pid *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__pid);
	if (soap_out_ns__pid(soap, tag?tag:"ns:pid", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__pid * SOAP_FMAC4 soap_get_ns__pid(struct soap *soap, struct ns__pid *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__pid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__pid * SOAP_FMAC2 soap_instantiate_ns__pid(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__pid(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__pid, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__pid);
		if (size)
			*size = sizeof(struct ns__pid);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__pid, n);
		if (size)
			*size = n * sizeof(struct ns__pid);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__pid*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__pid(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__pid %p -> %p\n", q, p));
	*(struct ns__pid*)p = *(struct ns__pid*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__pidResponse(struct soap *soap, struct ns__pidResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__pidResponse(struct soap *soap, const struct ns__pidResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->tag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__pidResponse(struct soap *soap, const char *tag, int id, const struct ns__pidResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__pidResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__pidResponse * SOAP_FMAC4 soap_in_ns__pidResponse(struct soap *soap, const char *tag, struct ns__pidResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__pidResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__pidResponse, sizeof(struct ns__pidResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__pidResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tag", &a->tag, "xsd:int"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__pidResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__pidResponse, 0, sizeof(struct ns__pidResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__pidResponse(struct soap *soap, const struct ns__pidResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__pidResponse);
	if (soap_out_ns__pidResponse(soap, tag?tag:"ns:pidResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__pidResponse * SOAP_FMAC4 soap_get_ns__pidResponse(struct soap *soap, struct ns__pidResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__pidResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__pidResponse * SOAP_FMAC2 soap_instantiate_ns__pidResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__pidResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__pidResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__pidResponse);
		if (size)
			*size = sizeof(struct ns__pidResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__pidResponse, n);
		if (size)
			*size = n * sizeof(struct ns__pidResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__pidResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__pidResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__pidResponse %p -> %p\n", q, p));
	*(struct ns__pidResponse*)p = *(struct ns__pidResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__clear(struct soap *soap, struct ns__clear *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__clear(struct soap *soap, const struct ns__clear *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__clear(struct soap *soap, const char *tag, int id, const struct ns__clear *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__clear), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__clear * SOAP_FMAC4 soap_in_ns__clear(struct soap *soap, const char *tag, struct ns__clear *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__clear *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__clear, sizeof(struct ns__clear), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__clear(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__clear *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__clear, 0, sizeof(struct ns__clear), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__clear(struct soap *soap, const struct ns__clear *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__clear);
	if (soap_out_ns__clear(soap, tag?tag:"ns:clear", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__clear * SOAP_FMAC4 soap_get_ns__clear(struct soap *soap, struct ns__clear *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__clear(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__clear * SOAP_FMAC2 soap_instantiate_ns__clear(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__clear(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__clear, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__clear);
		if (size)
			*size = sizeof(struct ns__clear);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__clear, n);
		if (size)
			*size = n * sizeof(struct ns__clear);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__clear*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__clear(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__clear %p -> %p\n", q, p));
	*(struct ns__clear*)p = *(struct ns__clear*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__clearResponse(struct soap *soap, struct ns__clearResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__clearResponse(struct soap *soap, const struct ns__clearResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->tag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__clearResponse(struct soap *soap, const char *tag, int id, const struct ns__clearResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__clearResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__clearResponse * SOAP_FMAC4 soap_in_ns__clearResponse(struct soap *soap, const char *tag, struct ns__clearResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__clearResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__clearResponse, sizeof(struct ns__clearResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__clearResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tag", &a->tag, "xsd:int"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__clearResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__clearResponse, 0, sizeof(struct ns__clearResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__clearResponse(struct soap *soap, const struct ns__clearResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__clearResponse);
	if (soap_out_ns__clearResponse(soap, tag?tag:"ns:clearResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__clearResponse * SOAP_FMAC4 soap_get_ns__clearResponse(struct soap *soap, struct ns__clearResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__clearResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__clearResponse * SOAP_FMAC2 soap_instantiate_ns__clearResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__clearResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__clearResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__clearResponse);
		if (size)
			*size = sizeof(struct ns__clearResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__clearResponse, n);
		if (size)
			*size = n * sizeof(struct ns__clearResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__clearResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__clearResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__clearResponse %p -> %p\n", q, p));
	*(struct ns__clearResponse*)p = *(struct ns__clearResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__progressPCT(struct soap *soap, struct ns__progressPCT *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__progressPCT(struct soap *soap, const struct ns__progressPCT *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__progressPCT(struct soap *soap, const char *tag, int id, const struct ns__progressPCT *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__progressPCT), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__progressPCT * SOAP_FMAC4 soap_in_ns__progressPCT(struct soap *soap, const char *tag, struct ns__progressPCT *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__progressPCT *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__progressPCT, sizeof(struct ns__progressPCT), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__progressPCT(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__progressPCT *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__progressPCT, 0, sizeof(struct ns__progressPCT), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__progressPCT(struct soap *soap, const struct ns__progressPCT *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__progressPCT);
	if (soap_out_ns__progressPCT(soap, tag?tag:"ns:progressPCT", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__progressPCT * SOAP_FMAC4 soap_get_ns__progressPCT(struct soap *soap, struct ns__progressPCT *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__progressPCT(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__progressPCT * SOAP_FMAC2 soap_instantiate_ns__progressPCT(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__progressPCT(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__progressPCT, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__progressPCT);
		if (size)
			*size = sizeof(struct ns__progressPCT);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__progressPCT, n);
		if (size)
			*size = n * sizeof(struct ns__progressPCT);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__progressPCT*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__progressPCT(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__progressPCT %p -> %p\n", q, p));
	*(struct ns__progressPCT*)p = *(struct ns__progressPCT*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__progressPCTResponse(struct soap *soap, struct ns__progressPCTResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__progressPCTResponse(struct soap *soap, const struct ns__progressPCTResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTofloat(soap, &a->tag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__progressPCTResponse(struct soap *soap, const char *tag, int id, const struct ns__progressPCTResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__progressPCTResponse), type))
		return soap->error;
	if (soap_out_PointerTofloat(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__progressPCTResponse * SOAP_FMAC4 soap_in_ns__progressPCTResponse(struct soap *soap, const char *tag, struct ns__progressPCTResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__progressPCTResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__progressPCTResponse, sizeof(struct ns__progressPCTResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__progressPCTResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTofloat(soap, "tag", &a->tag, "xsd:float"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__progressPCTResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__progressPCTResponse, 0, sizeof(struct ns__progressPCTResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__progressPCTResponse(struct soap *soap, const struct ns__progressPCTResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__progressPCTResponse);
	if (soap_out_ns__progressPCTResponse(soap, tag?tag:"ns:progressPCTResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__progressPCTResponse * SOAP_FMAC4 soap_get_ns__progressPCTResponse(struct soap *soap, struct ns__progressPCTResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__progressPCTResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__progressPCTResponse * SOAP_FMAC2 soap_instantiate_ns__progressPCTResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__progressPCTResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__progressPCTResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__progressPCTResponse);
		if (size)
			*size = sizeof(struct ns__progressPCTResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__progressPCTResponse, n);
		if (size)
			*size = n * sizeof(struct ns__progressPCTResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__progressPCTResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__progressPCTResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__progressPCTResponse %p -> %p\n", q, p));
	*(struct ns__progressPCTResponse*)p = *(struct ns__progressPCTResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__state(struct soap *soap, struct ns__state *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__state(struct soap *soap, const struct ns__state *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__state(struct soap *soap, const char *tag, int id, const struct ns__state *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__state), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__state * SOAP_FMAC4 soap_in_ns__state(struct soap *soap, const char *tag, struct ns__state *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__state *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__state, sizeof(struct ns__state), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__state(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__state *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__state, 0, sizeof(struct ns__state), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__state(struct soap *soap, const struct ns__state *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__state);
	if (soap_out_ns__state(soap, tag?tag:"ns:state", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__state * SOAP_FMAC4 soap_get_ns__state(struct soap *soap, struct ns__state *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__state(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__state * SOAP_FMAC2 soap_instantiate_ns__state(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__state(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__state, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__state);
		if (size)
			*size = sizeof(struct ns__state);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__state, n);
		if (size)
			*size = n * sizeof(struct ns__state);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__state*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__state(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__state %p -> %p\n", q, p));
	*(struct ns__state*)p = *(struct ns__state*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__stateResponse(struct soap *soap, struct ns__stateResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__stateResponse(struct soap *soap, const struct ns__stateResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->tag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__stateResponse(struct soap *soap, const char *tag, int id, const struct ns__stateResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__stateResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__stateResponse * SOAP_FMAC4 soap_in_ns__stateResponse(struct soap *soap, const char *tag, struct ns__stateResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__stateResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__stateResponse, sizeof(struct ns__stateResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__stateResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tag", &a->tag, "xsd:int"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__stateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__stateResponse, 0, sizeof(struct ns__stateResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__stateResponse(struct soap *soap, const struct ns__stateResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__stateResponse);
	if (soap_out_ns__stateResponse(soap, tag?tag:"ns:stateResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__stateResponse * SOAP_FMAC4 soap_get_ns__stateResponse(struct soap *soap, struct ns__stateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__stateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__stateResponse * SOAP_FMAC2 soap_instantiate_ns__stateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__stateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__stateResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__stateResponse);
		if (size)
			*size = sizeof(struct ns__stateResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__stateResponse, n);
		if (size)
			*size = n * sizeof(struct ns__stateResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__stateResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__stateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__stateResponse %p -> %p\n", q, p));
	*(struct ns__stateResponse*)p = *(struct ns__stateResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceRestart(struct soap *soap, struct ns__serviceRestart *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceRestart(struct soap *soap, const struct ns__serviceRestart *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceRestart(struct soap *soap, const char *tag, int id, const struct ns__serviceRestart *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__serviceRestart), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__serviceRestart * SOAP_FMAC4 soap_in_ns__serviceRestart(struct soap *soap, const char *tag, struct ns__serviceRestart *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__serviceRestart *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__serviceRestart, sizeof(struct ns__serviceRestart), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__serviceRestart(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__serviceRestart *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__serviceRestart, 0, sizeof(struct ns__serviceRestart), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceRestart(struct soap *soap, const struct ns__serviceRestart *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__serviceRestart);
	if (soap_out_ns__serviceRestart(soap, tag?tag:"ns:serviceRestart", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__serviceRestart * SOAP_FMAC4 soap_get_ns__serviceRestart(struct soap *soap, struct ns__serviceRestart *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__serviceRestart(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__serviceRestart * SOAP_FMAC2 soap_instantiate_ns__serviceRestart(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__serviceRestart(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__serviceRestart, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__serviceRestart);
		if (size)
			*size = sizeof(struct ns__serviceRestart);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__serviceRestart, n);
		if (size)
			*size = n * sizeof(struct ns__serviceRestart);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__serviceRestart*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceRestart(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__serviceRestart %p -> %p\n", q, p));
	*(struct ns__serviceRestart*)p = *(struct ns__serviceRestart*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceRestartResponse(struct soap *soap, struct ns__serviceRestartResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceRestartResponse(struct soap *soap, const struct ns__serviceRestartResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->tag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceRestartResponse(struct soap *soap, const char *tag, int id, const struct ns__serviceRestartResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__serviceRestartResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__serviceRestartResponse * SOAP_FMAC4 soap_in_ns__serviceRestartResponse(struct soap *soap, const char *tag, struct ns__serviceRestartResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__serviceRestartResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__serviceRestartResponse, sizeof(struct ns__serviceRestartResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__serviceRestartResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tag", &a->tag, "xsd:int"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__serviceRestartResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__serviceRestartResponse, 0, sizeof(struct ns__serviceRestartResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceRestartResponse(struct soap *soap, const struct ns__serviceRestartResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__serviceRestartResponse);
	if (soap_out_ns__serviceRestartResponse(soap, tag?tag:"ns:serviceRestartResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__serviceRestartResponse * SOAP_FMAC4 soap_get_ns__serviceRestartResponse(struct soap *soap, struct ns__serviceRestartResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__serviceRestartResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__serviceRestartResponse * SOAP_FMAC2 soap_instantiate_ns__serviceRestartResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__serviceRestartResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__serviceRestartResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__serviceRestartResponse);
		if (size)
			*size = sizeof(struct ns__serviceRestartResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__serviceRestartResponse, n);
		if (size)
			*size = n * sizeof(struct ns__serviceRestartResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__serviceRestartResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceRestartResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__serviceRestartResponse %p -> %p\n", q, p));
	*(struct ns__serviceRestartResponse*)p = *(struct ns__serviceRestartResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceStop(struct soap *soap, struct ns__serviceStop *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceStop(struct soap *soap, const struct ns__serviceStop *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceStop(struct soap *soap, const char *tag, int id, const struct ns__serviceStop *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__serviceStop), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__serviceStop * SOAP_FMAC4 soap_in_ns__serviceStop(struct soap *soap, const char *tag, struct ns__serviceStop *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__serviceStop *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__serviceStop, sizeof(struct ns__serviceStop), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__serviceStop(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__serviceStop *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__serviceStop, 0, sizeof(struct ns__serviceStop), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceStop(struct soap *soap, const struct ns__serviceStop *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__serviceStop);
	if (soap_out_ns__serviceStop(soap, tag?tag:"ns:serviceStop", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__serviceStop * SOAP_FMAC4 soap_get_ns__serviceStop(struct soap *soap, struct ns__serviceStop *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__serviceStop(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__serviceStop * SOAP_FMAC2 soap_instantiate_ns__serviceStop(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__serviceStop(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__serviceStop, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__serviceStop);
		if (size)
			*size = sizeof(struct ns__serviceStop);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__serviceStop, n);
		if (size)
			*size = n * sizeof(struct ns__serviceStop);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__serviceStop*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceStop(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__serviceStop %p -> %p\n", q, p));
	*(struct ns__serviceStop*)p = *(struct ns__serviceStop*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceStopResponse(struct soap *soap, struct ns__serviceStopResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceStopResponse(struct soap *soap, const struct ns__serviceStopResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->tag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceStopResponse(struct soap *soap, const char *tag, int id, const struct ns__serviceStopResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__serviceStopResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__serviceStopResponse * SOAP_FMAC4 soap_in_ns__serviceStopResponse(struct soap *soap, const char *tag, struct ns__serviceStopResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__serviceStopResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__serviceStopResponse, sizeof(struct ns__serviceStopResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__serviceStopResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tag", &a->tag, "xsd:int"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__serviceStopResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__serviceStopResponse, 0, sizeof(struct ns__serviceStopResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceStopResponse(struct soap *soap, const struct ns__serviceStopResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__serviceStopResponse);
	if (soap_out_ns__serviceStopResponse(soap, tag?tag:"ns:serviceStopResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__serviceStopResponse * SOAP_FMAC4 soap_get_ns__serviceStopResponse(struct soap *soap, struct ns__serviceStopResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__serviceStopResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__serviceStopResponse * SOAP_FMAC2 soap_instantiate_ns__serviceStopResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__serviceStopResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__serviceStopResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__serviceStopResponse);
		if (size)
			*size = sizeof(struct ns__serviceStopResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__serviceStopResponse, n);
		if (size)
			*size = n * sizeof(struct ns__serviceStopResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__serviceStopResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceStopResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__serviceStopResponse %p -> %p\n", q, p));
	*(struct ns__serviceStopResponse*)p = *(struct ns__serviceStopResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__imSearch(struct soap *soap, struct ns__imSearch *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->imgPath);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__imSearch(struct soap *soap, const struct ns__imSearch *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->imgPath);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__imSearch(struct soap *soap, const char *tag, int id, const struct ns__imSearch *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__imSearch), type))
		return soap->error;
	if (soap_out_std__string(soap, "imgPath", -1, &a->imgPath, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__imSearch * SOAP_FMAC4 soap_in_ns__imSearch(struct soap *soap, const char *tag, struct ns__imSearch *a, const char *type)
{
	size_t soap_flag_imgPath = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__imSearch *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__imSearch, sizeof(struct ns__imSearch), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__imSearch(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_imgPath && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "imgPath", &a->imgPath, "xsd:string"))
				{	soap_flag_imgPath--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__imSearch *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__imSearch, 0, sizeof(struct ns__imSearch), 0, soap_copy_ns__imSearch);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_imgPath > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__imSearch(struct soap *soap, const struct ns__imSearch *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__imSearch);
	if (soap_out_ns__imSearch(soap, tag?tag:"ns:imSearch", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__imSearch * SOAP_FMAC4 soap_get_ns__imSearch(struct soap *soap, struct ns__imSearch *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__imSearch(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__imSearch * SOAP_FMAC2 soap_instantiate_ns__imSearch(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__imSearch(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__imSearch, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__imSearch);
		if (size)
			*size = sizeof(struct ns__imSearch);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__imSearch, n);
		if (size)
			*size = n * sizeof(struct ns__imSearch);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__imSearch*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__imSearch(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__imSearch %p -> %p\n", q, p));
	*(struct ns__imSearch*)p = *(struct ns__imSearch*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceStart(struct soap *soap, struct ns__serviceStart *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceStart(struct soap *soap, const struct ns__serviceStart *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceStart(struct soap *soap, const char *tag, int id, const struct ns__serviceStart *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__serviceStart), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__serviceStart * SOAP_FMAC4 soap_in_ns__serviceStart(struct soap *soap, const char *tag, struct ns__serviceStart *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__serviceStart *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__serviceStart, sizeof(struct ns__serviceStart), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__serviceStart(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__serviceStart *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__serviceStart, 0, sizeof(struct ns__serviceStart), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceStart(struct soap *soap, const struct ns__serviceStart *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__serviceStart);
	if (soap_out_ns__serviceStart(soap, tag?tag:"ns:serviceStart", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__serviceStart * SOAP_FMAC4 soap_get_ns__serviceStart(struct soap *soap, struct ns__serviceStart *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__serviceStart(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__serviceStart * SOAP_FMAC2 soap_instantiate_ns__serviceStart(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__serviceStart(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__serviceStart, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__serviceStart);
		if (size)
			*size = sizeof(struct ns__serviceStart);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__serviceStart, n);
		if (size)
			*size = n * sizeof(struct ns__serviceStart);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__serviceStart*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceStart(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__serviceStart %p -> %p\n", q, p));
	*(struct ns__serviceStart*)p = *(struct ns__serviceStart*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceStartResponse(struct soap *soap, struct ns__serviceStartResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceStartResponse(struct soap *soap, const struct ns__serviceStartResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->tag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceStartResponse(struct soap *soap, const char *tag, int id, const struct ns__serviceStartResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__serviceStartResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__serviceStartResponse * SOAP_FMAC4 soap_in_ns__serviceStartResponse(struct soap *soap, const char *tag, struct ns__serviceStartResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__serviceStartResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__serviceStartResponse, sizeof(struct ns__serviceStartResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__serviceStartResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tag", &a->tag, "xsd:int"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__serviceStartResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__serviceStartResponse, 0, sizeof(struct ns__serviceStartResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceStartResponse(struct soap *soap, const struct ns__serviceStartResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__serviceStartResponse);
	if (soap_out_ns__serviceStartResponse(soap, tag?tag:"ns:serviceStartResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__serviceStartResponse * SOAP_FMAC4 soap_get_ns__serviceStartResponse(struct soap *soap, struct ns__serviceStartResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__serviceStartResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__serviceStartResponse * SOAP_FMAC2 soap_instantiate_ns__serviceStartResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__serviceStartResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__serviceStartResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__serviceStartResponse);
		if (size)
			*size = sizeof(struct ns__serviceStartResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__serviceStartResponse, n);
		if (size)
			*size = n * sizeof(struct ns__serviceStartResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__serviceStartResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceStartResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__serviceStartResponse %p -> %p\n", q, p));
	*(struct ns__serviceStartResponse*)p = *(struct ns__serviceStartResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__trainDelete(struct soap *soap, struct ns__trainDelete *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->imgPath);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__trainDelete(struct soap *soap, const struct ns__trainDelete *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->imgPath);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__trainDelete(struct soap *soap, const char *tag, int id, const struct ns__trainDelete *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__trainDelete), type))
		return soap->error;
	if (soap_out_std__string(soap, "imgPath", -1, &a->imgPath, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__trainDelete * SOAP_FMAC4 soap_in_ns__trainDelete(struct soap *soap, const char *tag, struct ns__trainDelete *a, const char *type)
{
	size_t soap_flag_imgPath = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__trainDelete *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__trainDelete, sizeof(struct ns__trainDelete), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__trainDelete(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_imgPath && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "imgPath", &a->imgPath, "xsd:string"))
				{	soap_flag_imgPath--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__trainDelete *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__trainDelete, 0, sizeof(struct ns__trainDelete), 0, soap_copy_ns__trainDelete);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_imgPath > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__trainDelete(struct soap *soap, const struct ns__trainDelete *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__trainDelete);
	if (soap_out_ns__trainDelete(soap, tag?tag:"ns:trainDelete", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__trainDelete * SOAP_FMAC4 soap_get_ns__trainDelete(struct soap *soap, struct ns__trainDelete *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__trainDelete(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__trainDelete * SOAP_FMAC2 soap_instantiate_ns__trainDelete(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__trainDelete(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__trainDelete, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__trainDelete);
		if (size)
			*size = sizeof(struct ns__trainDelete);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__trainDelete, n);
		if (size)
			*size = n * sizeof(struct ns__trainDelete);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__trainDelete*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__trainDelete(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__trainDelete %p -> %p\n", q, p));
	*(struct ns__trainDelete*)p = *(struct ns__trainDelete*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__trainDeleteResponse(struct soap *soap, struct ns__trainDeleteResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__trainDeleteResponse(struct soap *soap, const struct ns__trainDeleteResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->tag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__trainDeleteResponse(struct soap *soap, const char *tag, int id, const struct ns__trainDeleteResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__trainDeleteResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__trainDeleteResponse * SOAP_FMAC4 soap_in_ns__trainDeleteResponse(struct soap *soap, const char *tag, struct ns__trainDeleteResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__trainDeleteResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__trainDeleteResponse, sizeof(struct ns__trainDeleteResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__trainDeleteResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tag", &a->tag, "xsd:int"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__trainDeleteResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__trainDeleteResponse, 0, sizeof(struct ns__trainDeleteResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__trainDeleteResponse(struct soap *soap, const struct ns__trainDeleteResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__trainDeleteResponse);
	if (soap_out_ns__trainDeleteResponse(soap, tag?tag:"ns:trainDeleteResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__trainDeleteResponse * SOAP_FMAC4 soap_get_ns__trainDeleteResponse(struct soap *soap, struct ns__trainDeleteResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__trainDeleteResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__trainDeleteResponse * SOAP_FMAC2 soap_instantiate_ns__trainDeleteResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__trainDeleteResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__trainDeleteResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__trainDeleteResponse);
		if (size)
			*size = sizeof(struct ns__trainDeleteResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__trainDeleteResponse, n);
		if (size)
			*size = n * sizeof(struct ns__trainDeleteResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__trainDeleteResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__trainDeleteResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__trainDeleteResponse %p -> %p\n", q, p));
	*(struct ns__trainDeleteResponse*)p = *(struct ns__trainDeleteResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__trainAdd(struct soap *soap, struct ns__trainAdd *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->imgPath);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__trainAdd(struct soap *soap, const struct ns__trainAdd *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->imgPath);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__trainAdd(struct soap *soap, const char *tag, int id, const struct ns__trainAdd *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__trainAdd), type))
		return soap->error;
	if (soap_out_std__string(soap, "imgPath", -1, &a->imgPath, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__trainAdd * SOAP_FMAC4 soap_in_ns__trainAdd(struct soap *soap, const char *tag, struct ns__trainAdd *a, const char *type)
{
	size_t soap_flag_imgPath = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__trainAdd *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__trainAdd, sizeof(struct ns__trainAdd), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__trainAdd(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_imgPath && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "imgPath", &a->imgPath, "xsd:string"))
				{	soap_flag_imgPath--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__trainAdd *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__trainAdd, 0, sizeof(struct ns__trainAdd), 0, soap_copy_ns__trainAdd);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_imgPath > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__trainAdd(struct soap *soap, const struct ns__trainAdd *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__trainAdd);
	if (soap_out_ns__trainAdd(soap, tag?tag:"ns:trainAdd", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__trainAdd * SOAP_FMAC4 soap_get_ns__trainAdd(struct soap *soap, struct ns__trainAdd *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__trainAdd(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__trainAdd * SOAP_FMAC2 soap_instantiate_ns__trainAdd(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__trainAdd(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__trainAdd, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__trainAdd);
		if (size)
			*size = sizeof(struct ns__trainAdd);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__trainAdd, n);
		if (size)
			*size = n * sizeof(struct ns__trainAdd);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__trainAdd*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__trainAdd(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__trainAdd %p -> %p\n", q, p));
	*(struct ns__trainAdd*)p = *(struct ns__trainAdd*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__trainAddResponse(struct soap *soap, struct ns__trainAddResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__trainAddResponse(struct soap *soap, const struct ns__trainAddResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->tag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__trainAddResponse(struct soap *soap, const char *tag, int id, const struct ns__trainAddResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__trainAddResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__trainAddResponse * SOAP_FMAC4 soap_in_ns__trainAddResponse(struct soap *soap, const char *tag, struct ns__trainAddResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__trainAddResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__trainAddResponse, sizeof(struct ns__trainAddResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__trainAddResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tag", &a->tag, "xsd:int"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__trainAddResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__trainAddResponse, 0, sizeof(struct ns__trainAddResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__trainAddResponse(struct soap *soap, const struct ns__trainAddResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__trainAddResponse);
	if (soap_out_ns__trainAddResponse(soap, tag?tag:"ns:trainAddResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__trainAddResponse * SOAP_FMAC4 soap_get_ns__trainAddResponse(struct soap *soap, struct ns__trainAddResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__trainAddResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__trainAddResponse * SOAP_FMAC2 soap_instantiate_ns__trainAddResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__trainAddResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__trainAddResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__trainAddResponse);
		if (size)
			*size = sizeof(struct ns__trainAddResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__trainAddResponse, n);
		if (size)
			*size = n * sizeof(struct ns__trainAddResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__trainAddResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__trainAddResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__trainAddResponse %p -> %p\n", q, p));
	*(struct ns__trainAddResponse*)p = *(struct ns__trainAddResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__train(struct soap *soap, struct ns__train *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->autostart);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__train(struct soap *soap, const struct ns__train *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->autostart, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__train(struct soap *soap, const char *tag, int id, const struct ns__train *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__train), type))
		return soap->error;
	if (soap_out_int(soap, "autostart", -1, &a->autostart, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__train * SOAP_FMAC4 soap_in_ns__train(struct soap *soap, const char *tag, struct ns__train *a, const char *type)
{
	size_t soap_flag_autostart = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__train *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__train, sizeof(struct ns__train), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__train(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_autostart && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "autostart", &a->autostart, "xsd:int"))
				{	soap_flag_autostart--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__train *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__train, 0, sizeof(struct ns__train), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_autostart > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__train(struct soap *soap, const struct ns__train *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__train);
	if (soap_out_ns__train(soap, tag?tag:"ns:train", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__train * SOAP_FMAC4 soap_get_ns__train(struct soap *soap, struct ns__train *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__train(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__train * SOAP_FMAC2 soap_instantiate_ns__train(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__train(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__train, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__train);
		if (size)
			*size = sizeof(struct ns__train);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__train, n);
		if (size)
			*size = n * sizeof(struct ns__train);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__train*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__train(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__train %p -> %p\n", q, p));
	*(struct ns__train*)p = *(struct ns__train*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__trainResponse(struct soap *soap, struct ns__trainResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__trainResponse(struct soap *soap, const struct ns__trainResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->tag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__trainResponse(struct soap *soap, const char *tag, int id, const struct ns__trainResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__trainResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__trainResponse * SOAP_FMAC4 soap_in_ns__trainResponse(struct soap *soap, const char *tag, struct ns__trainResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__trainResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__trainResponse, sizeof(struct ns__trainResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__trainResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tag", &a->tag, "xsd:int"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__trainResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__trainResponse, 0, sizeof(struct ns__trainResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__trainResponse(struct soap *soap, const struct ns__trainResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__trainResponse);
	if (soap_out_ns__trainResponse(soap, tag?tag:"ns:trainResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__trainResponse * SOAP_FMAC4 soap_get_ns__trainResponse(struct soap *soap, struct ns__trainResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__trainResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__trainResponse * SOAP_FMAC2 soap_instantiate_ns__trainResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__trainResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__trainResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__trainResponse);
		if (size)
			*size = sizeof(struct ns__trainResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__trainResponse, n);
		if (size)
			*size = n * sizeof(struct ns__trainResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__trainResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__trainResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__trainResponse %p -> %p\n", q, p));
	*(struct ns__trainResponse*)p = *(struct ns__trainResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceInit(struct soap *soap, struct ns__serviceInit *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->workspace);
	soap_default_std__string(soap, &a->tpldir);
	soap_default_std__string(soap, &a->recgmethod);
	soap_default_std__string(soap, &a->option);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceInit(struct soap *soap, const struct ns__serviceInit *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->workspace);
	soap_serialize_std__string(soap, &a->tpldir);
	soap_serialize_std__string(soap, &a->recgmethod);
	soap_serialize_std__string(soap, &a->option);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceInit(struct soap *soap, const char *tag, int id, const struct ns__serviceInit *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__serviceInit), type))
		return soap->error;
	if (soap_out_std__string(soap, "workspace", -1, &a->workspace, ""))
		return soap->error;
	if (soap_out_std__string(soap, "tpldir", -1, &a->tpldir, ""))
		return soap->error;
	if (soap_out_std__string(soap, "recgmethod", -1, &a->recgmethod, ""))
		return soap->error;
	if (soap_out_std__string(soap, "option", -1, &a->option, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__serviceInit * SOAP_FMAC4 soap_in_ns__serviceInit(struct soap *soap, const char *tag, struct ns__serviceInit *a, const char *type)
{
	size_t soap_flag_workspace = 1;
	size_t soap_flag_tpldir = 1;
	size_t soap_flag_recgmethod = 1;
	size_t soap_flag_option = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__serviceInit *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__serviceInit, sizeof(struct ns__serviceInit), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__serviceInit(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_workspace && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "workspace", &a->workspace, "xsd:string"))
				{	soap_flag_workspace--;
					continue;
				}
			if (soap_flag_tpldir && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "tpldir", &a->tpldir, "xsd:string"))
				{	soap_flag_tpldir--;
					continue;
				}
			if (soap_flag_recgmethod && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "recgmethod", &a->recgmethod, "xsd:string"))
				{	soap_flag_recgmethod--;
					continue;
				}
			if (soap_flag_option && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "option", &a->option, "xsd:string"))
				{	soap_flag_option--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__serviceInit *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__serviceInit, 0, sizeof(struct ns__serviceInit), 0, soap_copy_ns__serviceInit);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_workspace > 0 || soap_flag_tpldir > 0 || soap_flag_recgmethod > 0 || soap_flag_option > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceInit(struct soap *soap, const struct ns__serviceInit *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__serviceInit);
	if (soap_out_ns__serviceInit(soap, tag?tag:"ns:serviceInit", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__serviceInit * SOAP_FMAC4 soap_get_ns__serviceInit(struct soap *soap, struct ns__serviceInit *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__serviceInit(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__serviceInit * SOAP_FMAC2 soap_instantiate_ns__serviceInit(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__serviceInit(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__serviceInit, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__serviceInit);
		if (size)
			*size = sizeof(struct ns__serviceInit);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__serviceInit, n);
		if (size)
			*size = n * sizeof(struct ns__serviceInit);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__serviceInit*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceInit(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__serviceInit %p -> %p\n", q, p));
	*(struct ns__serviceInit*)p = *(struct ns__serviceInit*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__serviceInitResponse(struct soap *soap, struct ns__serviceInitResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->tag = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__serviceInitResponse(struct soap *soap, const struct ns__serviceInitResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerToint(soap, &a->tag);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__serviceInitResponse(struct soap *soap, const char *tag, int id, const struct ns__serviceInitResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__serviceInitResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__serviceInitResponse * SOAP_FMAC4 soap_in_ns__serviceInitResponse(struct soap *soap, const char *tag, struct ns__serviceInitResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__serviceInitResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_ns__serviceInitResponse, sizeof(struct ns__serviceInitResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__serviceInitResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "tag", &a->tag, "xsd:int"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__serviceInitResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__serviceInitResponse, 0, sizeof(struct ns__serviceInitResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__serviceInitResponse(struct soap *soap, const struct ns__serviceInitResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__serviceInitResponse);
	if (soap_out_ns__serviceInitResponse(soap, tag?tag:"ns:serviceInitResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__serviceInitResponse * SOAP_FMAC4 soap_get_ns__serviceInitResponse(struct soap *soap, struct ns__serviceInitResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__serviceInitResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__serviceInitResponse * SOAP_FMAC2 soap_instantiate_ns__serviceInitResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__serviceInitResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__serviceInitResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__serviceInitResponse);
		if (size)
			*size = sizeof(struct ns__serviceInitResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__serviceInitResponse, n);
		if (size)
			*size = n * sizeof(struct ns__serviceInitResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__serviceInitResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__serviceInitResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__serviceInitResponse %p -> %p\n", q, p));
	*(struct ns__serviceInitResponse*)p = *(struct ns__serviceInitResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__searchResponse(struct soap *soap, struct ns__searchResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->tag);
	soap_default_std__vectorTemplateOfns__pc(soap, &a->match);
	soap_default_std__string(soap, &a->ocr);
	soap_default_int(soap, &a->consumedTime);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__searchResponse(struct soap *soap, const struct ns__searchResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_embedded(soap, &a->tag, SOAP_TYPE_int);
	soap_serialize_std__vectorTemplateOfns__pc(soap, &a->match);
	soap_serialize_std__string(soap, &a->ocr);
	soap_embedded(soap, &a->consumedTime, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__searchResponse(struct soap *soap, const char *tag, int id, const struct ns__searchResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__searchResponse), type))
		return soap->error;
	if (soap_out_int(soap, "tag", -1, &a->tag, ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfns__pc(soap, "match", -1, &a->match, ""))
		return soap->error;
	if (soap_out_std__string(soap, "ocr", -1, &a->ocr, ""))
		return soap->error;
	if (soap_out_int(soap, "consumedTime", -1, &a->consumedTime, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__searchResponse * SOAP_FMAC4 soap_in_ns__searchResponse(struct soap *soap, const char *tag, struct ns__searchResponse *a, const char *type)
{
	size_t soap_flag_tag = 1;
	size_t soap_flag_ocr = 1;
	size_t soap_flag_consumedTime = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__searchResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__searchResponse, sizeof(struct ns__searchResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__searchResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_tag && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "tag", &a->tag, "xsd:int"))
				{	soap_flag_tag--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfns__pc(soap, "match", &a->match, "ns:pc"))
					continue;
			if (soap_flag_ocr && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ocr", &a->ocr, "xsd:string"))
				{	soap_flag_ocr--;
					continue;
				}
			if (soap_flag_consumedTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "consumedTime", &a->consumedTime, "xsd:int"))
				{	soap_flag_consumedTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__searchResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__searchResponse, 0, sizeof(struct ns__searchResponse), 0, soap_copy_ns__searchResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_tag > 0 || soap_flag_ocr > 0 || soap_flag_consumedTime > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__searchResponse(struct soap *soap, const struct ns__searchResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__searchResponse);
	if (soap_out_ns__searchResponse(soap, tag?tag:"ns:searchResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__searchResponse * SOAP_FMAC4 soap_get_ns__searchResponse(struct soap *soap, struct ns__searchResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__searchResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__searchResponse * SOAP_FMAC2 soap_instantiate_ns__searchResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__searchResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__searchResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__searchResponse);
		if (size)
			*size = sizeof(struct ns__searchResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__searchResponse, n);
		if (size)
			*size = n * sizeof(struct ns__searchResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__searchResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__searchResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__searchResponse %p -> %p\n", q, p));
	*(struct ns__searchResponse*)p = *(struct ns__searchResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__pc(struct soap *soap, struct ns__pc *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->pc);
	soap_default_int(soap, &a->score);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__pc(struct soap *soap, const struct ns__pc *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &a->pc);
	soap_embedded(soap, &a->score, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__pc(struct soap *soap, const char *tag, int id, const struct ns__pc *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns__pc), type))
		return soap->error;
	if (soap_out_std__string(soap, "pc", -1, &a->pc, ""))
		return soap->error;
	if (soap_out_int(soap, "score", -1, &a->score, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__pc * SOAP_FMAC4 soap_in_ns__pc(struct soap *soap, const char *tag, struct ns__pc *a, const char *type)
{
	size_t soap_flag_pc = 1;
	size_t soap_flag_score = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__pc *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns__pc, sizeof(struct ns__pc), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__pc(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_pc && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "pc", &a->pc, "xsd:string"))
				{	soap_flag_pc--;
					continue;
				}
			if (soap_flag_score && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "score", &a->score, "xsd:int"))
				{	soap_flag_score--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__pc *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns__pc, 0, sizeof(struct ns__pc), 0, soap_copy_ns__pc);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_pc > 0 || soap_flag_score > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__pc(struct soap *soap, const struct ns__pc *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns__pc);
	if (soap_out_ns__pc(soap, tag?tag:"ns:pc", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__pc * SOAP_FMAC4 soap_get_ns__pc(struct soap *soap, struct ns__pc *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__pc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__pc * SOAP_FMAC2 soap_instantiate_ns__pc(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__pc(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns__pc, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__pc);
		if (size)
			*size = sizeof(struct ns__pc);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__pc, n);
		if (size)
			*size = n * sizeof(struct ns__pc);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__pc*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__pc(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__pc %p -> %p\n", q, p));
	*(struct ns__pc*)p = *(struct ns__pc*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToresult(struct soap *soap, result *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_result))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToresult(struct soap *soap, const char *tag, int id, result *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_result);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 result ** SOAP_FMAC4 soap_in_PointerToresult(struct soap *soap, const char *tag, result **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (result **)soap_malloc(soap, sizeof(result *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (result *)soap_instantiate_result(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	result ** p = (result **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_result, sizeof(result), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToresult(struct soap *soap, result *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToresult);
	if (soap_out_PointerToresult(soap, tag?tag:"result", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 result ** SOAP_FMAC4 soap_get_PointerToresult(struct soap *soap, result **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToresult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTofloat(struct soap *soap, float *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_float);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTofloat(struct soap *soap, const char *tag, int id, float *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_float);
	if (id < 0)
		return soap->error;
	return soap_out_float(soap, tag, id, *a, type);
}

SOAP_FMAC3 float ** SOAP_FMAC4 soap_in_PointerTofloat(struct soap *soap, const char *tag, float **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (float **)soap_malloc(soap, sizeof(float *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_float(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (float **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_float, sizeof(float), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTofloat(struct soap *soap, float *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTofloat);
	if (soap_out_PointerTofloat(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float ** SOAP_FMAC4 soap_get_PointerTofloat(struct soap *soap, float **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTofloat(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__searchResponse(struct soap *soap, struct ns__searchResponse *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_ns__searchResponse))
		soap_serialize_ns__searchResponse(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__searchResponse(struct soap *soap, const char *tag, int id, struct ns__searchResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns__searchResponse);
	if (id < 0)
		return soap->error;
	return soap_out_ns__searchResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct ns__searchResponse ** SOAP_FMAC4 soap_in_PointerTons__searchResponse(struct soap *soap, const char *tag, struct ns__searchResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct ns__searchResponse **)soap_malloc(soap, sizeof(struct ns__searchResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_ns__searchResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct ns__searchResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns__searchResponse, sizeof(struct ns__searchResponse), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__searchResponse(struct soap *soap, struct ns__searchResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons__searchResponse);
	if (soap_out_PointerTons__searchResponse(soap, tag?tag:"ns:searchResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__searchResponse ** SOAP_FMAC4 soap_get_PointerTons__searchResponse(struct soap *soap, struct ns__searchResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__searchResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfbox(struct soap *soap, std::vector<box >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfbox(struct soap *soap, const std::vector<box >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<box >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfbox(struct soap *soap, const char *tag, int id, const std::vector<box >*a, const char *type)
{
	for (std::vector<box >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<box >* SOAP_FMAC4 soap_in_std__vectorTemplateOfbox(struct soap *soap, const char *tag, std::vector<box >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	box n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_box, SOAP_TYPE_std__vectorTemplateOfbox, sizeof(box), 0))
				break;
			if (!soap_in_box(soap, tag, NULL, "box"))
				break;
		}
		else if (!soap_in_box(soap, tag, &n, "box"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfbox(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<box > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfbox(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfbox(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfbox, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<box >);
		if (size)
			*size = sizeof(std::vector<box >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<box >, n);
		if (size)
			*size = n * sizeof(std::vector<box >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<box >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfbox(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<box > %p -> %p\n", q, p));
	*(std::vector<box >*)p = *(std::vector<box >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string >*a, const char *type)
{
	for (std::vector<std::string >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	std::string n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_std__string(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_std__string, SOAP_TYPE_std__vectorTemplateOfstd__string, sizeof(std::string), 0))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfstd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<std::string >);
		if (size)
			*size = sizeof(std::vector<std::string >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<std::string >, n);
		if (size)
			*size = n * sizeof(std::vector<std::string >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<std::string >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfstd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<std::string > %p -> %p\n", q, p));
	*(std::vector<std::string >*)p = *(std::vector<std::string >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__pc(struct soap *soap, std::vector<struct ns__pc >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__pc(struct soap *soap, const std::vector<struct ns__pc >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<struct ns__pc >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_ns__pc(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__pc(struct soap *soap, const char *tag, int id, const std::vector<struct ns__pc >*a, const char *type)
{
	for (std::vector<struct ns__pc >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_ns__pc(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<struct ns__pc >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns__pc(struct soap *soap, const char *tag, std::vector<struct ns__pc >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	struct ns__pc n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_ns__pc(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_ns__pc, SOAP_TYPE_std__vectorTemplateOfns__pc, sizeof(struct ns__pc), 0))
				break;
			if (!soap_in_ns__pc(soap, tag, NULL, "ns:pc"))
				break;
		}
		else if (!soap_in_ns__pc(soap, tag, &n, "ns:pc"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfns__pc(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<struct ns__pc > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__pc(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfns__pc(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOfns__pc, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<struct ns__pc >);
		if (size)
			*size = sizeof(std::vector<struct ns__pc >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<struct ns__pc >, n);
		if (size)
			*size = n * sizeof(std::vector<struct ns__pc >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<struct ns__pc >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns__pc(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<struct ns__pc > %p -> %p\n", q, p));
	*(std::vector<struct ns__pc >*)p = *(std::vector<struct ns__pc >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
